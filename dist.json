{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "ServicePOS API",
    "description": "The Open API specification for ServicePOS. Further docs at https://app.deltateq.com/doc/api",
    "contact": {
      "name": "info@servicepos.com"
    }
  },
  "servers": [
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    },
    {
      "url": "https://app.deltateq.com/api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/passcode": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login from existing user to different user belonging to the same store",
        "operationId": "passcodeLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthPasscodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/support": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Support login",
        "operationId": "supportLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthSupportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth": {
      "post": {
        "security": [],
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customerarticles": {
      "get": {
        "tags": [
          "CustomerArticles"
        ],
        "summary": "Get list of customer articles",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerArticleListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerArticles"
        ],
        "summary": "Create a new customer article",
        "operationId": "addCustomerArticle",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomerArticle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerArticleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customerarticles/{id}": {
      "get": {
        "tags": [
          "CustomerArticles"
        ],
        "summary": "Get a customer article",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerArticleResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerArticles"
        ],
        "summary": "Update a customer article",
        "operationId": "updateCustomerArticle",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomerArticle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerArticleResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerArticles"
        ],
        "summary": "Delete a customer article",
        "operationId": "deleteCustomerArticle",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerArticleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Search for customers",
        "description": "",
        "operationId": "searchCustomers",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true,
            "description": "Return the count or not. More slow, consider using thasMore for pagination"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported."
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of products) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of products to fetch in one page."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "example": 1,
            "description": "Sorting order. If `order` is 1, products are retrieved in ascending order, if -1, in descending order."
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string"
            },
            "example": "id",
            "description": "Sort by `field`."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchCustomerResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Add a new customer",
        "description": "",
        "operationId": "addCustomer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/customers/{customerId}": {
      "get": {
        "summary": "Get a customer",
        "operationId": "getCustomer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The customer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace a customer",
        "operationId": "updateCustomer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The customer ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a customer",
        "operationId": "deleteCustomer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The customer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/customertags": {
      "get": {
        "tags": [
          "CustomerTags"
        ],
        "summary": "Get list of customer tags used by the store",
        "operationId": "getCustomerTags",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTagsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerTags"
        ],
        "summary": "Add a new customer tag to the store",
        "operationId": "createCustomerTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/customertags/{tagId}": {
      "get": {
        "tags": [
          "CustomerTags"
        ],
        "summary": "Get a customer tag",
        "operationId": "getCustomerTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The tag ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerTags"
        ],
        "summary": "Delete a customer tag from the store",
        "operationId": "deleteCustomerTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The tag ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerTags"
        ],
        "summary": "Update a customer tag",
        "operationId": "updateCustomerTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "schema": {
              "type": "integer",
              "required": true
            },
            "description": "The tag ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTagsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/financevouchers/{id}": {
      "get": {
        "tags": [
          "Finance"
        ],
        "summary": "Get finance voucher for a balance",
        "parameters": [
          {
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FinanceVoucher"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/giftcards": {
      "get": {
        "tags": [
          "Gift cards"
        ],
        "summary": "Search for gift cards",
        "description": "Get gift cards. Gift cards are readonly and can only be created via ServicePOS app",
        "operationId": "searchGiftcard",
        "parameters": [
          {
            "in": "query",
            "name": "freetext",
            "schema": {
              "type": "string"
            },
            "description": "The free text that is used to search in name, type, giftcardno, phone etc."
          },
          {
            "in": "query",
            "name": "fromdate",
            "schema": {
              "type": "string"
            },
            "description": "date",
            "example": "2020-01-01 00:00:00"
          },
          {
            "in": "query",
            "name": "todate",
            "schema": {
              "type": "string"
            },
            "description": "date",
            "example": "2020-01-01 23:59:59"
          },
          {
            "in": "query",
            "name": "giftcardid",
            "schema": {
              "type": "integer"
            },
            "description": "filter on id"
          },
          {
            "in": "query",
            "name": "giftcardno",
            "schema": {
              "type": "string"
            },
            "description": "filter on id"
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of item) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "example": 1,
            "description": "Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order."
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string"
            },
            "example": "id",
            "description": "Sort by `field` e.g. giftcardno, date,.."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGiftcardsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Gift cards"
        ],
        "summary": "Create a gift card",
        "description": "Create giftcards. Creates a giftcard in the system.",
        "operationId": "createGiftcard",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostGiftcardsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostGiftcardsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/giftcards/{id}": {
      "get": {
        "tags": [
          "Gift cards"
        ],
        "summary": "Get gift card",
        "description": "Get gift cards. Gift cards are readonly and can only be created via ServicePOS app",
        "operationId": "getGiftcard",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The giftcard id"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok. The created giftcard is returned in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGiftcardResponse"
                }
              }
            }
          },
          "404": {
            "description": "Giftcard not found."
          }
        }
      }
    },
    "/hooks/events": {
      "get": {
        "summary": "Get the list of valid events.",
        "tags": [
          "Rest Hooks"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHookEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/trigger": {
      "get": {
        "summary": "Trigger an event. Only admins can do this.",
        "tags": [
          "Rest Hooks"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "storeid",
            "schema": {
              "type": "integer"
            },
            "description": "The store id for which the event is relevant. If not specified, or specified as 0, the event applies to all stores."
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string",
              "example": "product.created"
            },
            "required": true,
            "description": "The event to trigger, e.g. product.created."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      }
    },
    "/hooks": {
      "get": {
        "tags": [
          "Rest Hooks"
        ],
        "summary": "List current subscriptions for store.",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHookResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rest Hooks"
        ],
        "summary": "Subscribe to event",
        "description": "Subscribe to an event like product.created with a callback url to get pinged when the event triggers. See http://resthooks.org/",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The hook information expected when subscribing to an event.",
                "properties": {
                  "event": {
                    "description": "The event name of the subscription using noun.verb syntax.",
                    "type": "string",
                    "example": "product.created"
                  },
                  "url": {
                    "description": "The callback url of the subscription.",
                    "type": "string",
                    "format": "uri",
                    "example": "https://hookb.in/G9QaXZRbeZh1m1eBNr2P"
                  },
                  "active": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "default": 1,
                    "description": "Whether or not the hook is enabled."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The hook information returned when subscribing to an an event.",
                  "properties": {
                    "id": {
                      "description": "The id needed to unsubscribe.",
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            },
            "links": {
              "unsubscribeOp": {
                "operationId": "unsubscribe",
                "parameters": {
                  "hookId": "$response.body#/id"
                },
                "description": "The `id` returned in the response is used as the parameter `hookId` in `DELETE /hooks/{hookId}`"
              }
            }
          },
          "4XX": {
            "description": "Invalid input"
          }
        },
        "callbacks": {
          "callback": {
            "{$request.body#/url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": []
                  }
                },
                "responses": {
                  "200": {
                    "description": "Ok"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}": {
      "get": {
        "operationId": "getSubscription",
        "tags": [
          "Rest Hooks"
        ],
        "summary": "Get subscription",
        "description": "Get the subscription details for given an id.",
        "parameters": [
          {
            "in": "path",
            "name": "hookId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHook"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "operationId": "updateSubscription",
        "tags": [
          "Rest Hooks"
        ],
        "summary": "Update subscription",
        "description": "Update the subscription for an event given an id.",
        "parameters": [
          {
            "in": "path",
            "name": "hookId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The hook information expected when subscribing to an event.",
                "properties": {
                  "event": {
                    "description": "The event name of the subscription using noun.verb syntax.",
                    "type": "string",
                    "example": "product.created"
                  },
                  "url": {
                    "description": "The callback url of the subscription.",
                    "type": "string",
                    "format": "uri",
                    "example": "https://hookb.in/G9QaXZRbeZh1m1eBNr2P"
                  },
                  "active": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "default": 1,
                    "description": "Whether or not the hook is enabled."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The status of the subscription update.",
                  "properties": {
                    "updated": {
                      "type": "integer",
                      "example": 1,
                      "description": "Whether or not the event was updated. 0 for failure, 1 for success."
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "operationId": "unsubscribe",
        "tags": [
          "Rest Hooks"
        ],
        "summary": "Unsubscribe from event",
        "description": "Unsubscribe from an event given an id for subscription.",
        "parameters": [
          {
            "in": "path",
            "name": "hookId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "The status of the subscription deletion.",
                  "properties": {
                    "deleted": {
                      "type": "integer",
                      "example": 1,
                      "description": "Whether or not the event was deleted. 0 for failure, 1 for success."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymenttyperelation/{id}/receipts": {
      "get": {
        "tags": [
          "PaymentTypeRelation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          }
        ],
        "summary": "Gets receipt for a paymenttyperelation",
        "description": "",
        "operationId": "getPaymentTypeReceipts",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymenttyperelation/{paymentid}": {
      "get": {
        "tags": [
          "PaymentTypeRelation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          },
          {
            "in": "query",
            "name": "getreceipts",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Whether or not to include receipts"
          }
        ],
        "summary": "Add a list of articles to an existing payment",
        "description": "",
        "operationId": "getPaymentTypes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentTypeRelation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PaymentTypeRelation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          }
        ],
        "summary": "Add a list of payments to an existing payment",
        "description": "",
        "operationId": "addPaymentTypes",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentTypeRelation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentTypeRelation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The payment you are trying to add paymenttypes to does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "PaymentTypeRelation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the payment"
          }
        ],
        "summary": "Changes status of a payment",
        "description": "Can only change the status of a payment if it is not captured",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTypeRelation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTypeRelation"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      }
    },
    "/paymenttypes": {
      "get": {
        "tags": [
          "PaymentType"
        ],
        "descrpition": "",
        "summary": "Get a list of all the store's payment types.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PaymentType"
        ],
        "description": "",
        "summary": "Create a payment type",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentType"
                }
              }
            }
          }
        }
      }
    },
    "/paymenttypes/{id}": {
      "get": {
        "tags": [
          "PaymentType"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "description": "",
        "summary": "Get a list of all the store's payment types.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentType"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PaymentType"
        ],
        "description": "",
        "summary": "Edit an exisiting payment type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The PaymentType ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentType"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PaymentType"
        ],
        "description": "",
        "summary": "Delete a payment type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The PaymentType ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "integer",
                      "readOnly": true,
                      "example": 1,
                      "description": "Whether or not the PaymentType was deleted."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/posbalances": {
      "get": {
        "tags": [
          "POSBalances"
        ],
        "summary": "Search for balances",
        "description": "Get balances. Balances are readonly and can only be created via ServicePOS app",
        "operationId": "searchBalances",
        "parameters": [
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of item) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "example": 1,
            "description": "Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order."
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string"
            },
            "example": "id",
            "description": "Sort by `field` e.g. date,..."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPOSBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pospayments/{paymentid}/articles": {
      "post": {
        "tags": [
          "POSPayments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          }
        ],
        "summary": "Add a list of articles to an existing payment",
        "description": "",
        "operationId": "addArticles",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentArticle"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentArticle"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The payment you are trying to add articles to does exist"
          }
        }
      }
    },
    "/pospayments": {
      "get": {
        "tags": [
          "POSPayments"
        ],
        "summary": "Search for payments",
        "description": "Get payments. Payments are readonly and can only be created via ServicePOS app",
        "operationId": "searchPosPayments",
        "parameters": [
          {
            "in": "query",
            "name": "freetext",
            "schema": {
              "type": "string"
            },
            "description": "The free text that is used to search in paymentno, payment materials, etc."
          },
          {
            "in": "query",
            "name": "fromdate",
            "schema": {
              "type": "string"
            },
            "description": "date",
            "example": "2020-01-01 00:00:00"
          },
          {
            "in": "query",
            "name": "cash",
            "schema": {
              "type": "integer"
            },
            "description": "1 of you only want cash payments"
          },
          {
            "in": "query",
            "name": "invoice",
            "schema": {
              "type": "integer"
            },
            "description": "1 of you only want invoice payments",
            "example": 1
          },
          {
            "in": "query",
            "name": "todate",
            "schema": {
              "type": "string"
            },
            "description": "date",
            "example": "2020-01-01 23:59:59"
          },
          {
            "in": "query",
            "name": "productid",
            "schema": {
              "type": "integer"
            },
            "description": "Get payments of a specific product"
          },
          {
            "in": "query",
            "name": "userid",
            "schema": {
              "type": "integer"
            },
            "description": "filter on userid"
          },
          {
            "in": "query",
            "name": "customerid",
            "schema": {
              "type": "integer"
            },
            "description": "filter on customerid"
          },
          {
            "in": "query",
            "name": "paymenttypeid",
            "schema": {
              "type": "integer"
            },
            "description": "Filter on paymenttype"
          },
          {
            "in": "query",
            "name": "bamdeskdevice",
            "schema": {
              "type": "integer"
            },
            "description": "1 = only get bamdeskdevice payments"
          },
          {
            "in": "query",
            "name": "fromPartnerStores",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Includes payments from partner stores when not 0"
          },
          {
            "in": "query",
            "name": "extra",
            "schema": {
              "type": "integer"
            },
            "description": "Return extra info that is expansive"
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of item) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "example": 1,
            "description": "Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order."
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string"
            },
            "example": "id",
            "description": "Sort by `field` e.g. paymentno, date,."
          },
          {
            "in": "query",
            "name": "cashRegisterId",
            "schema": {
              "type": "number"
            },
            "example": 1,
            "description": "Get payments with a specific cash register"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPOSPaymentResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POSPayments"
        ],
        "summary": "Add a new POS payment",
        "description": "",
        "operationId": "addPayment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSPayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSPayment"
                }
              }
            }
          }
        }
      }
    },
    "/pospayments/{paymentid}": {
      "get": {
        "summary": "Get a payment",
        "operationId": "getProduct",
        "tags": [
          "POSPayments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSPaymentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/productmasterdata/bulk": {
      "post": {
        "tags": [
          "ProductMasterData"
        ],
        "summary": "Add or update product master data in bulk. Update is triggered if {suppliername, productno, industry, country} matches existing item",
        "description": "",
        "operationId": "addUpdateBulk",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductMasterData"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductMasterDataResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productmasterdata": {
      "post": {
        "tags": [
          "ProductMasterData"
        ],
        "summary": "Add or update product master data. Update is triggered if {suppliername, productno, industry, country} matches existing item",
        "description": "",
        "operationId": "addUpdate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMasterData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMasterDataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search for product",
        "description": "",
        "operationId": "searchProduct",
        "parameters": [
          {
            "in": "query",
            "name": "barcode",
            "schema": {
              "type": "string"
            },
            "description": "Barcode"
          },
          {
            "in": "query",
            "name": "brand",
            "schema": {
              "type": "string"
            },
            "description": "Brand"
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true,
            "description": "Return the count or not."
          },
          {
            "in": "query",
            "name": "freetext",
            "schema": {
              "type": "string"
            },
            "description": "The free text that is used to search in titles, supplier etc."
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the product."
          },
          {
            "in": "query",
            "name": "inStock",
            "schema": {
              "type": "boolean"
            },
            "description": "Only retrieve products that are currently in stock."
          },
          {
            "in": "query",
            "name": "needsOrdering",
            "schema": {
              "type": "boolean"
            },
            "description": "Only retrieve products that needs to be ordered because of low stock."
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of products) to fetch. This is usually a multiple of the pageLength. For legacy support you can also write pagination-start"
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of products to fetch in one page. For legacy support you can also write pagination-PageLength"
          },
          {
            "in": "query",
            "name": "productNo",
            "schema": {
              "type": "string"
            },
            "description": "Product number"
          },
          {
            "in": "query",
            "name": "styleNo",
            "schema": {
              "type": "string"
            },
            "description": "style number"
          },
          {
            "in": "query",
            "name": "serieNo",
            "schema": {
              "type": "string"
            },
            "description": "Serie-number"
          },
          {
            "in": "query",
            "name": "hasSerieNo",
            "schema": {
              "type": "boolean"
            },
            "description": "Return products that has a serie-number"
          },
          {
            "in": "query",
            "name": "sort-order",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "example": 1,
            "description": "Sorting order. If `order` is 1, products are retrieved in ascending order, if -1, in descending order."
          },
          {
            "in": "query",
            "name": "sort-field",
            "schema": {
              "type": "string"
            },
            "example": "id",
            "description": "Sort by `field`."
          },
          {
            "in": "query",
            "name": "suppliername",
            "schema": {
              "type": "string"
            },
            "description": "Name of the supplier."
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Tag."
          },
          {
            "in": "query",
            "name": "supplierid",
            "schema": {
              "type": "string"
            },
            "description": "Supplier."
          },
          {
            "in": "query",
            "name": "flexposfinancegroup",
            "schema": {
              "type": "string"
            },
            "description": "FlexPOS finance group. Should mostly be left untouched."
          },
          {
            "in": "query",
            "name": "flexposviewgroup",
            "schema": {
              "type": "string"
            },
            "description": "FlexPOS view group. Should mostly be left untouched."
          },
          {
            "in": "query",
            "name": "partnerstoreid",
            "schema": {
              "type": "string"
            },
            "description": "List products for partner store."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchProductResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add a new product",
        "description": "",
        "operationId": "addProduct",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "summary": "Get a product",
        "operationId": "getProduct",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Replace a product",
        "description": "",
        "operationId": "replaceProduct",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete a product",
        "operationId": "deleteProduct",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      }
    },
    "/producttags": {
      "get": {
        "tags": [
          "ProductTags"
        ],
        "summary": "Get list of product tags used by the store",
        "operationId": "getProductTags",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTagListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProductTags"
        ],
        "summary": "Create a new product tag",
        "operationId": "createProductTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTagResponse"
                }
              }
            }
          }
        }
      }
    },
    "/producttags/{id}": {
      "get": {
        "tags": [
          "ProductTags"
        ],
        "summary": "Get a product tag used by the store",
        "operationId": "getProductTag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTagResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductTags"
        ],
        "summary": "Delete a product tag",
        "operationId": "deleteProductTag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTagResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProductTags"
        ],
        "summary": "Update a product tag",
        "operationId": "updateProductTag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTagResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/applyToTicket": {
      "post": {
        "tags": [
          "Promotions"
        ],
        "summary": "Given a ticket, apply promotions to materials based on materials and customer and return the list of materials.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketMaterialListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/cart": {
      "post": {
        "tags": [
          "Promotions"
        ],
        "summary": "Given a cart, return the new cart with promotion discounts applied.",
        "description": "This endpoint is primarily used in our own POS implementation assumes our own cart data structure.\n\nThe bare minimum data structure for this call is an object with a property `articles` which is a list of `CartArticle`.\nEach article contains extra information about whether it is a product, discount etc. and whether it was created manually or automatically.\n\nIn the future, this might be made more generally applicable.\n"
      }
    },
    "/promotions/lookup": {
      "post": {
        "tags": [
          "Promotions"
        ],
        "summary": "Get all relevant promotions for a set of products and a customer.",
        "description": "Get all relevant promotions for a set of products and a customer.\nCurrently the customer is ignore and can be null.\nThis query can be seen as \"given a cart, what promotions will match?\"\n\nIf you have multiple of the same products in the query, they should be represented as a `CartArticle`,\ni.e. specified by a `productno` and `quantity` (see example). Otherwise, you can simply use productno strings.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionLookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionLookupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promotions": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "List promotions for store.",
        "parameters": [
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of item to fetch in one page."
          },
          {
            "in": "query",
            "name": "active",
            "required": false,
            "description": "Optional. If equal to `1`, only active promotions will be returned,\ni.e. only promotions with `active` attribute set to `true` and where today's date is inside the date range of the promotion.\nBy default, all promotions including inactive will be listed.\n",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "freeText",
            "required": false,
            "description": "Optional. Search for promotion name, product, brand, tag and customer group",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "actionType",
            "description": "Optional. Search promotions by its action type",
            "schema": {
              "type": "string",
              "enum": [
                "percentage",
                "adjustPriceBy",
                "percentageByCostprice",
                "totalPrice",
                "totalPriceUnit"
              ]
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "required": false,
            "description": "Optional. Search promotions by start date (format YYYY-MM-DD HH:MM:SS)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "required": false,
            "description": "Optional. Search promotions by end date (format YYYY-MM-DD HH:MM:SS)",
            "schema": [
              {
                "type": "string"
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPromotionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Promotions"
        ],
        "summary": "Add new promotion",
        "description": "Create a new promotion that results in an automatic discount when matching products are put in the POS cart.\n\nThe automatic assignment of discounts is based product filters (explained in more detail below).\nWhen these filters match, the promotion triggers an action resulting in some kind of discount presentend in the cart.\nCurrently, actions come in two flavors: *single product discounts* and *bundle discounts*.\nHow the promotion will trigger depends on this flavor.\n\nSingle product discounts (`percentage`, `adjustPriceBy`, `percentageByCostprice`, `totalPriceUnit`):\n  Here, a single product gets discount by some amount.\n  The filters can match against productnos, brands and tags.\n\nBundle discounts (`totalPrice`):\n  Here, multiple products combine to give a single discount,\n  for instance \"Buy X and Y and get it for the price of X.\"\n  Currently, these types of promotions only support matching against a list of productnos.\n\nEach promotion has a required `name` which shown in the cart when the discount is given.\n`description` is optional and designed only for humans to read. It is only shown in the settings.\n`active` can be used to disable promotions until they are ready.\nPromotions will also only be considered active when today's date is inside the `startdate`-`enddate`-range.\nIf `enddate` is `null`, the promotion is considered to run forever.\n\nProduct filters are inclusive by nature. In the future, excluding filters will be added as well.\nFilters have an `attribute` and a `value`. The attribute can be various attributes of a product, like `tag` and `productno`.\nFor instance, to give a discount on all bikes with tag *Bike*, see the example below).\nThe `value` can be a list of values in which case, if either of the values match, the filter matches.\nAnd if either of the filters matches, the promotion will trigger (in case of single product discounts).\n\nThe filters for bundle discounts currently needs to be very specific:\nA single filter with `attribute` = productno and `value` = *list of productnos*.\n\nIn the future, it will be possible to filter based on customer attributes as well, such that specific customers can get certain discounts.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "$ref": "#/components/schemas/Promotion"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 123,
                      "description": "The id of the promotion."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/promotions/{id}": {
      "get": {
        "operationId": "retrieve",
        "tags": [
          "Promotions"
        ],
        "summary": "Retrieve promotion",
        "description": "Given a specific promotion id, fetch the entire promotion object.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update",
        "tags": [
          "Promotions"
        ],
        "summary": "Update promotion",
        "description": "Replace the promotion object of a specific promotion with another.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "$ref": "#/components/schemas/Promotion"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updated": {
                      "type": "integer",
                      "example": 1,
                      "description": "Whether or not the promotion was deleted. 0 for failure, 1 for success."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete",
        "tags": [
          "Promotions"
        ],
        "summary": "Delete promotion.",
        "description": "Delete a promotion based an id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "integer",
                      "example": 1,
                      "description": "Whether or not the promotion was deleted. 0 for failure, 1 for success."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registers": {
      "get": {
        "tags": [
          "POSRegister"
        ],
        "description": "",
        "summary": "Get a list of all the store's POS registers.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSRegisterResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POSRegister"
        ],
        "description": "",
        "summary": "Create a new POSRegister",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPOSRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetPOSRegisterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/registers/{id}": {
      "put": {
        "tags": [
          "POSRegister"
        ],
        "description": "",
        "summary": "Edit an exisiting POS register",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The POS register ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPOSRegister"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetPOSRegisterResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "POSRegister"
        ],
        "summary": "Get a POS register based on id",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetPOSRegisterResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "POSRegister"
        ],
        "summary": "Deletes a POS register based on id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The POS register ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetPOSRegisterResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      }
    },
    "/settings/billingmodules": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get active billing modules for the specific store",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/BillingModules"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/configs": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update a list of configs",
        "description": "",
        "operationId": "updateConfigs",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetConfigs"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get all configs",
        "description": "",
        "operationId": "configs",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigs"
                }
              }
            }
          }
        }
      }
    },
    "/settings/configs/{config}": {
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete a config",
        "description": "",
        "operationId": "deleteConfig"
      }
    },
    "/settings/store": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update store info",
        "description": "",
        "operationId": "updateStore",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get store info",
        "description": "",
        "operationId": "getStore",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get settings",
        "description": "",
        "operationId": "getSettings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsAPI"
                }
              }
            }
          }
        }
      }
    },
    "/shoppinglist/totalcostprice": {
      "get": {
        "tags": [
          "Shopping List total cost price"
        ],
        "summary": "Get the total cost price of a shopping list",
        "description": "",
        "operationId": "getShoppingListTotalCostPrice",
        "parameters": [
          {
            "in": "query",
            "name": "orderid",
            "schema": {
              "type": "integer"
            },
            "example": 30
          },
          {
            "in": "query",
            "name": "supplierid",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingListTotalCostPriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/shoppinglist": {
      "post": {
        "tags": [
          "Shopping List"
        ],
        "summary": "Add item to the shopping list",
        "description": "",
        "operationId": "addShippingListItem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetShoppingListItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetShoppingListItem"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Shopping List"
        ],
        "summary": "List shopping list",
        "description": "",
        "operationId": "searchShoppingList",
        "parameters": [
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "orderid",
            "schema": {
              "type": "integer"
            },
            "example": 30
          },
          {
            "in": "query",
            "name": "notordered",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "default": 0,
            "description": "filter ordered items"
          },
          {
            "in": "query",
            "name": "supplierid",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchShoppingListResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shopping list Orders"
        ],
        "summary": "Delete a shopping list order",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "deleted": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shoppinglist/{id}": {
      "get": {
        "summary": "Get a shopping list item",
        "operationId": "getShoppingListItem",
        "tags": [
          "Shopping List"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The shopping list ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingListItemResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a item",
        "operationId": "deleteShoppingListItem",
        "tags": [
          "Shopping List"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The shopping list ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingListItemResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shopping List"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The shopping list ID"
          }
        ],
        "summary": "Replace item in shopping list",
        "description": "",
        "operationId": "replaceShoppingListItem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetShoppingListItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetShoppingListItem"
                }
              }
            }
          }
        }
      }
    },
    "/shoppinglistorder/bulkupdate/{orderlistid}": {
      "put": {
        "tags": [
          "Shopping list Orders"
        ],
        "summary": "Updates properties for all orders that has the given orderlistid.",
        "parameters": [
          {
            "in": "path",
            "name": "orderlistid",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "expecteddelivery": {
                    "nullable": true,
                    "type": "string",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "updated": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      }
    },
    "/shoppinglistorder": {
      "post": {
        "tags": [
          "Shopping List Order"
        ],
        "summary": "An order of shopping list items",
        "description": "",
        "operationId": "addShoppingListOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetShoppingListOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetShoppingListOrder"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Shopping List orders"
        ],
        "summary": "List shopping list orders",
        "description": "",
        "operationId": "searchShoppingListOrders",
        "parameters": [
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "freetext",
            "schema": {
              "type": "string"
            },
            "example": "Bike",
            "description": "Freetext search for note, orderlist number, product title etc."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "received",
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "If it is set to 1, it only retrieves orders with all items received"
          },
          {
            "in": "query",
            "name": "notReceived",
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "If it is set to 1, it only retrieves orders where the items are not received"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchShoppingListOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/shoppinglistorder/{id}": {
      "delete": {
        "tags": [
          "Shopping list Orders"
        ],
        "summary": "Delete a shopping list order",
        "operationid": "deleteOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "deleted": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stocktransactionlist/{id}/commit": {
      "post": {
        "tags": [
          "Stock transaction list"
        ],
        "summary": "Bulk commit entries in a stock transaction list",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockTransactionCommitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionCommitResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stocktransactionlist": {
      "get": {
        "tags": [
          "Stock transaction list"
        ],
        "summary": "List stock transaction lists",
        "description": "",
        "operationId": "getStockTransactionLists",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported."
          },
          {
            "in": "query",
            "name": "partnerstoreid",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 30,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "committed",
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "1 to list committed lists, 0 to list non-committed lists"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/StockTransactionListType"
            },
            "example": "move"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "You can filter productno, title, note, combination1, brand"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionListSearchResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stock transaction list"
        ],
        "summary": "Add stock transaction list",
        "description": "",
        "operationId": "addStockReception",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetStockTransactionList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stocktransactionlist/{stocktransactionlistId}": {
      "get": {
        "summary": "Get a stock transaction list",
        "operationId": "getStockTransactionList",
        "description": "A list of stock transactions. All stock transaction can commited ",
        "tags": [
          "Stock transaction list"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stocktransactionlistId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          },
          {
            "in": "query",
            "name": "calculations",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Display `addToStockSum` and `totalCostprice` in response by setting this value"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionListResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Stock transaction list"
        ],
        "summary": "Replace a stock transaction list",
        "description": "",
        "operationId": "replaceStockTransactionList",
        "parameters": [
          {
            "in": "path",
            "name": "stocktransactionlistId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetStockTransactionList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionListResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Stock transaction list",
        "operationId": "deleteStockTransactionList",
        "tags": [
          "Stock transaction list"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stocktransactionlistId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The  ID"
          }
        ],
        "responses": {
          "2XX": {
            "content": []
          }
        }
      }
    },
    "/stocktransactionlistfromorderlistid/{orderlistid}": {
      "post": {
        "tags": [
          "Stock transaction list from orderlist"
        ],
        "summary": "Add stock transaction list from orderlistid",
        "description": "",
        "operationId": "addStockFromOrderlistid",
        "parameters": [
          {
            "in": "path",
            "name": "orderlistid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "note": {
                    "type": "string",
                    "nullable": true,
                    "description": "Note to the transactionlist"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stocktransactions": {
      "get": {
        "tags": [
          "Stock transaction"
        ],
        "summary": "Search for stock transaction",
        "description": "Represents changes to product stock and costprice",
        "operationId": "getStockTransactions",
        "parameters": [
          {
            "in": "query",
            "name": "productid",
            "description": "The ID of the product",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "stocktransactionlistid",
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the stock transaction list"
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0,
              "example": 100
            },
            "description": "Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 50,
            "description": "Determine the number of items to fetch in one page."
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchStockTransactionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stock transaction"
        ],
        "summary": "Add stock reception",
        "description": "",
        "operationId": "addStockReception",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetStockTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stocktransactions/{stocktransactionId}": {
      "get": {
        "summary": "Get a stock transaction",
        "operationId": "getStockTransaction",
        "tags": [
          "Stock transaction"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stocktransactionId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product ID"
          },
          {
            "in": "query",
            "name": "partnerstoreid",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Stock transaction"
        ],
        "summary": "Replace a stock transaction",
        "description": "Stock transaction can be changed if they are not committed",
        "operationId": "replaceStockTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "stocktransactionId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetStockTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a stock transaction",
        "description": "Stock transaction can be changed if they are not committed",
        "operationId": "deleteStockTransaction",
        "tags": [
          "Stock transaction"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stocktransactionId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/suppliers": {
      "post": {
        "tags": [
          "Supplier"
        ],
        "summary": "Adding a new supplier",
        "requestBody": {
          "description": "Ok",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get a list of all the suppliers.",
        "parameters": [
          {
            "in": "query",
            "name": "hasOrders",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "1 to include only suppliers that has orders"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSupplierResponse"
                }
              }
            }
          }
        }
      }
    },
    "/suppliers/{id}": {
      "put": {
        "tags": [
          "Supplier"
        ],
        "description": "",
        "summary": "Edit an exisiting supplier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The supplier  ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      },
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get a supplier based on id",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Supplier"
        ],
        "summary": "Delete a supplier based on id",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "4XX": {
            "description": "Not found"
          }
        }
      }
    },
    "/tickets/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get a list of task files",
        "operationId": "listTaskFiles",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketFileListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Add a new task file",
        "operationId": "addTaskFile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickets/files/{id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get a task file",
        "operationId": "getTaskFile",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketFileResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete a task file",
        "operationid": "deleteTaskFile",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickets/materials": {
      "get": {
        "tags": [
          "Materials"
        ],
        "summary": "Get list of task materials",
        "operationId": "listTicketMaterials",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketMaterialListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Materials"
        ],
        "summary": "Create a new task material",
        "operationId": "addTicketMaterial",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketMaterial"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketMaterialResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickets/materials/{id}": {
      "get": {
        "tags": [
          "Materials"
        ],
        "summary": "Get a task material",
        "operationId": "getTicketMaterial",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketMaterialResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Materials"
        ],
        "summary": "Delete a task material",
        "operationId": "deleteTicketMaterial",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketMaterialResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Materials"
        ],
        "summary": "Update a task material",
        "operationId": "updateTicketMaterial",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketMaterial"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketMaterialResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get a list of tickets",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                1
              ],
              "default": 1
            },
            "example": 1,
            "description": "Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order."
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string"
            },
            "example": "id",
            "description": "Sort by `field`."
          },
          {
            "in": "query",
            "name": "paginationStart",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 100,
            "description": "Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength."
          },
          {
            "in": "query",
            "name": "paginationPageLength",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "example": 50,
            "description": "Determine the number of items to fetch in one page."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create a new ticket",
        "description": "",
        "operationId": "addTicket",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ticket ID"
          }
        ],
        "summary": "Get a ticket",
        "operationId": "getTicket",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ticket ID"
          }
        ],
        "summary": "Update a ticket",
        "operationId": "updateTicket",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ticket ID"
          }
        ],
        "summary": "Delete a ticket",
        "operationId": "deleteTicket",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickettags": {
      "post": {
        "tags": [
          "TicketTag"
        ],
        "description": "",
        "operationId": "tickettag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTagResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TicketTag"
        ],
        "summary": "Get all configs",
        "operationId": "tickettag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTicketTag"
                }
              }
            }
          }
        }
      }
    },
    "/tickettags/{id}": {
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SetTicketTag"
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "TicketTag"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTagResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "TicketTag"
        ],
        "summary": "Get all configs",
        "operationId": "tickettag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTagResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickettemplates": {
      "post": {
        "tags": [
          "TicketTemplate"
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTemplateReponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TicketTemplate"
        ],
        "summary": "Get all configs",
        "operationId": "tickettag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTicketTemplate"
                }
              }
            }
          }
        }
      }
    },
    "/tickettemplates/{id}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "TicketTemplate"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTemplateReponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "TicketTemplate"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTemplateReponse"
                }
              }
            }
          }
        }
      }
    },
    "/tickettemplatesmaterials": {
      "post": {
        "tags": [
          "TicketTemplate"
        ],
        "description": "",
        "summary": "set all ticket template materials for general sale tickets",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTicketTemplateMaterial"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTemplateMaterialReponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TicketTemplate"
        ],
        "summary": "get all ticket template materials for general sale tickets",
        "operationId": "tickettag",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTicketTemplateMaterial"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/passcode": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set user passcode",
        "operationId": "setPasscode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "passcode": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set user password",
        "operationId": "setPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "password": {
                    "type": "string",
                    "nullable": true
                  },
                  "currentPassword": {
                    "type": "string",
                    "nullable": true
                  },
                  "email": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "",
        "summary": "Add user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRespond"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get all users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUsers"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRespond"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "Users"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "AuthResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "apitoken": {
            "type": "string",
            "readOnly": true,
            "description": "The apitoken returned on a successful auth request"
          },
          "userid": {
            "type": "number",
            "readOnly": true,
            "nullable": true,
            "description": "The userid of the user logged in to (if relevant)"
          }
        }
      },
      "AuthPasscodeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "passcode": {
            "type": "string",
            "description": "The passcode of the user to log in to",
            "example": 1
          }
        }
      },
      "AuthSupportRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "targetStoreId": {
            "type": "integer",
            "description": "The id of the store to log in to",
            "example": 1
          },
          "apitoken": {
            "type": "string",
            "description": "The apitoken of the user who is making the authentication request"
          }
        }
      },
      "AuthRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the TaskUser to log in to"
          },
          "password": {
            "type": "string",
            "description": "The password of the TaskUser to log in to"
          },
          "economic_agreement_grant_token": {
            "type": "string",
            "nullable": true,
            "description": "E-conomic agreement grant token used by E-conomic app store redirect"
          }
        }
      },
      "BamdeskDevice": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique BamdeskDevice id"
          },
          "title": {
            "type": "string",
            "example": "Payment terminal",
            "description": "The name of the BamdeskDevice"
          },
          "state": {
            "type": "string",
            "example": "CONNECTED",
            "nullable": true,
            "description": "The connection state of the BamdeskDevice."
          },
          "derivedstate": {
            "type": "string",
            "readOnly": true,
            "example": "CONNECTED",
            "nullable": true,
            "description": "The derived connection state of the BamdeskDevice.",
            "enum": [
              "CONNECTED",
              "AUTO_DISCOVERY",
              "BAMDESK_NOT_RUNNING"
            ]
          },
          "lastactivity": {
            "type": "string",
            "example": "2020-01-30 10:00:00",
            "nullable": true,
            "description": "The timestamp of the time the device was last used"
          },
          "printdeskid": {
            "type": "string",
            "nullable": true,
            "description": "no idea"
          },
          "ip": {
            "type": "string",
            "nullable": true,
            "example": "192.168.1.120",
            "description": "The IP of the BamdeskDevice"
          }
        }
      },
      "CustomerArticle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "nullable": true,
            "description": "A unique CustomerArticle ID"
          },
          "dateadded": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "example": 1566900000,
            "description": "The date the customertarticle was created"
          },
          "customerid": {
            "type": "integer",
            "example": 1,
            "description": "The ID of the customer the customerarticle belongs to"
          },
          "title": {
            "type": "string",
            "example": "Kildemoes Cykel"
          },
          "serieno": {
            "type": "string",
            "nullable": true,
            "example": "1231232"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "example": "Blue"
          },
          "size": {
            "type": "string",
            "nullable": true,
            "example": "Large"
          },
          "customfield1": {
            "type": "string",
            "nullable": true,
            "example": "Gear"
          },
          "customfield2": {
            "type": "string",
            "nullable": true,
            "example": "123123"
          },
          "customfield3": {
            "type": "string",
            "nullable": true,
            "example": "123123"
          }
        }
      },
      "CustomerArticleListResponse": {
        "type": "object",
        "description": "Response when requesting a list of customer articles",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerArticle"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "CustomerArticleResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "Response when requesting a customer article",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/CustomerArticle"
          }
        }
      },
      "SetCustomerArticle": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used for creating / updating CustomerArticles",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/CustomerArticle"
          }
        }
      },
      "CustomerTagsResponse": {
        "type": "object",
        "description": "The customer tags used by a store.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerTag"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of customer tags found"
          }
        }
      },
      "CustomerTag": {
        "type": "object",
        "description": "A customer tag",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the tag"
          },
          "id": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the tag"
          }
        }
      },
      "Customer": {
        "type": "object",
        "description": "The representation of a customer.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique customer ID"
          },
          "createddate": {
            "type": "string",
            "example": "2019-01-02 01:02:03",
            "readonly": true,
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}\\ \\d{2}:\\d{2}:\\d{2}\\.?\\d*$"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "John Doe",
            "description": "The name of the customer."
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "example": "+4533608586",
            "description": "The phone number of the customer. Should start with country code, like +45. If not, assume +45."
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "johndoe@example.com",
            "description": "The email of the customer."
          },
          "address": {
            "type": "string",
            "nullable": true,
            "example": "Andebyvej 1",
            "description": "The address of the customer."
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "Odense",
            "description": "The city of the customer."
          },
          "zipcode": {
            "type": "string",
            "nullable": true,
            "example": "5000",
            "description": "The zip code of the customer."
          },
          "country": {
            "type": "string",
            "nullable": true,
            "example": "dk",
            "description": "The country of the customer. Must be in format ISO 3166-1 alpha-2."
          },
          "lat": {
            "type": "number",
            "nullable": true,
            "readOnly": true,
            "format": "double",
            "description": "The latitude of the customer."
          },
          "lng": {
            "type": "number",
            "nullable": true,
            "readOnly": true,
            "format": "double",
            "description": "The longitude of the customer."
          },
          "ean": {
            "type": "string",
            "nullable": true,
            "example": "12345678",
            "description": "The EAN number associated with the customer. Must be a valid EAN."
          },
          "vat": {
            "type": "string",
            "nullable": true,
            "example": "12345678",
            "description": "The VAT/CVR number associated with the customer."
          },
          "economic_customernumber": {
            "type": "integer",
            "nullable": true,
            "example": 12345678,
            "description": "The e-conomic number of the customer."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Pays on time.",
            "description": "A note about the customer."
          },
          "draft": {
            "type": "integer",
            "example": 0,
            "description": "Whether or not the customer is in draft mode"
          },
          "tags": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/CustomerTag"
            },
            "nullable": true,
            "description": "Tags associated with the customer."
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "description": "The representation of a customer response",
        "additionalproperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "SetCustomer": {
        "type": "object",
        "description": "The body of the request used for creating / updating customers",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "SearchCustomerResponse": {
        "type": "object",
        "description": "The representation of a customer search.",
        "additionalproperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of customers found by the query if ignoring pagination. Is null if `count` was not specified in the query parameter."
          },
          "hasMore": {
            "type": "boolean",
            "description": "True if there are more customers to receive than the current pagination allowed."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "message",
          "errorcode",
          "code"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of the error"
          },
          "errorcode": {
            "type": "string",
            "example": "PRODUCT_PRODUCTNO_EXISTS",
            "description": "A string representation of the error that can easily be identified."
          },
          "code": {
            "type": "integer",
            "example": 404,
            "description": "HTTP response status code"
          },
          "logid": {
            "type": "string",
            "nullable": true,
            "description": "A reference to the log entry if the error was logged."
          },
          "storeid": {
            "type": "integer",
            "nullable": true,
            "description": "A reference to the customer. NULL if no customer is authenticated"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "description": "An object with extra error information"
          },
          "debug": {
            "type": "object",
            "descripton": "An object with debugging information. Only visible in development mode"
          },
          "info": {
            "type": "string"
          }
        }
      },
      "FinanceVoucher": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title",
          "amount",
          "account"
        ],
        "properties": {
          "title": {
            "type": "string",
            "nullable": false,
            "description": "Voucher text"
          },
          "amount": {
            "type": "number",
            "nullable": false
          },
          "account": {
            "type": "number",
            "description": "Account Number",
            "nullable": false
          },
          "contraAccount": {
            "type": "number",
            "description": "Contra-account Number",
            "nullable": true
          }
        }
      },
      "GiftCardTypes": {
        "type": "string",
        "enum": [
          "giftcard",
          "voucher",
          "deposit"
        ]
      },
      "Giftcard": {
        "type": "object",
        "additionalProperties": false,
        "description": "A gift card (subject to change)",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique ID",
            "readOnly": true,
            "nullable": true
          },
          "giftcardno": {
            "type": "string",
            "example": "1234567891234",
            "description": "a unique string to identify giftcards."
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "amountspent": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "paymentmaterialid": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "a reference to the payment material"
          },
          "paymentid": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "a reference to the payment material"
          },
          "store": {
            "$ref": "#/components/schemas/Store",
            "description": "The store from which the giftcard has been issued. Can be different from the current store if giftcards are shared between stores."
          },
          "type": {
            "$ref": "#/components/schemas/GiftCardTypes"
          },
          "customer": {
            "readOnly": true,
            "nullable": true,
            "$ref": "#/components/schemas/Customer",
            "description": "The customer who brought the giftcard"
          },
          "vat": {
            "type": "integer",
            "nullable": true
          },
          "productid": {
            "type": "integer",
            "nullable": true
          },
          "productno": {
            "type": "string",
            "nullable": true
          },
          "createddate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "When the gift card was issued."
          },
          "expirationdate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "When the gift card expires. Defaults to the createddate + the value of the storeconfig \"giftcard_expiration_years\"."
          },
          "expired": {
            "type": "boolean",
            "nullable": true,
            "description": "When the gift card expires."
          }
        },
        "required": [
          "amount",
          "type"
        ]
      },
      "SearchGiftcardsResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a gift card search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Giftcard"
            }
          },
          "count": {
            "type": "integer",
            "description": "The total number of items found by the query."
          }
        }
      },
      "PostGiftcardsRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "The giftcard to be created by the post.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Giftcard"
          }
        }
      },
      "PostGiftcardsResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The respone of a gift card creation.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Giftcard"
          }
        }
      },
      "GetGiftcardResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "Returns giftcard if found.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Giftcard"
          }
        }
      },
      "RestHookResponse": {
        "type": "object",
        "description": "A list of rest hooks.",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestHook"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of items found by the query if ignoring pagination."
          }
        }
      },
      "RestHook": {
        "type": "object",
        "additionalProperties": false,
        "description": "Object representing a rest hook subscription.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 123,
            "description": "A unique ID. Use this to handle this subscription."
          },
          "event": {
            "type": "string",
            "example": "product.created",
            "description": "The event being listened for."
          },
          "url": {
            "type": "string",
            "example": "https://hookb.in/Mqdd36mEeEUqaq6znxda",
            "description": "The event being listened for."
          },
          "receiver": {
            "type": "string",
            "nullable": true,
            "example": "zapier",
            "description": "An identifier to distinguish different receivers."
          },
          "active": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "example": 1,
            "description": "Whether or not the hook is enabled."
          },
          "created": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "readOnly": true,
            "example": "2019-01-01 12:00:00",
            "description": "Creation date of hook."
          },
          "lastactivity": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "readOnly": true,
            "example": "2019-01-01 12:00:00",
            "description": "Date of last time the hook got used."
          }
        }
      },
      "RestHookEventResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The list of events that can be subscribed to, like `product.created`.",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaymentType": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique payment type id"
          },
          "title": {
            "type": "string",
            "example": "Cash",
            "description": "The name of a payment type"
          },
          "accountno": {
            "type": "string",
            "example": 1234,
            "nullable": true,
            "description": "The account number associated with the payment type"
          },
          "currency": {
            "type": "string",
            "example": "DKK",
            "nullable": true,
            "description": "The currency associated with the payment type"
          },
          "exchangerate": {
            "type": "number",
            "example": 7.5,
            "nullable": true,
            "description": "The exchange rate of the given currency (if any) to the store's main currency."
          },
          "cash": {
            "type": "integer",
            "example": 0,
            "defualt": 0,
            "description": "Whether or not the payment type is physical cash"
          }
        }
      },
      "POSBalance": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a POS balance",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique payment ID"
          },
          "date": {
            "type": "string",
            "example": "2019-01-01 12:00:00",
            "description": "The date of the balance. Defaults to current date"
          },
          "numpayments": {
            "type": "integer",
            "example": 5,
            "description": "The number of payments in the balance."
          },
          "cashstart": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "The cash in the register at the start of the balance."
          },
          "cashcounted": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "The counted cash in the cash register"
          },
          "cashrevenue": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "Revenue in cash"
          },
          "cashtobank": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "Cash taken out of the register and put in the bank."
          },
          "cashdifference": {
            "type": "number",
            "format": "double",
            "example": 123.45
          },
          "totalrevenue": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "The total revenue"
          },
          "cashregistertitle": {
            "type": "string",
            "nullable": true,
            "example": "Register 1",
            "description": "The name of the cash register (if any)"
          },
          "lastdinerosync": {
            "type": "string",
            "nullable": true,
            "example": "2019-01-01 12:00:00",
            "description": "The datetime of the last Dinero sync (if any)"
          },
          "lasteconomicsync": {
            "type": "string",
            "nullable": true,
            "example": "2019-01-01 12:00:00",
            "description": "The datetime of the last E-conomic sync (if any)"
          },
          "userid": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "paymenttypes": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "paymenttypeid": {
                  "type": "integer",
                  "example": 1,
                  "description": "The id of the payment type (if present)",
                  "nullable": true
                },
                "title": {
                  "type": "string",
                  "example": "Cash",
                  "description": "The type of payment"
                },
                "amount": {
                  "type": "number",
                  "format": "double",
                  "example": 123.45,
                  "description": "The amount of the payment type."
                },
                "cash": {
                  "type": "boolean",
                  "example": true,
                  "description": "Returns whether or not the payment type is cash-based."
                },
                "bamdesk_messageid": {
                  "type": "integer",
                  "nullable": true,
                  "example": "75",
                  "description": "The id for the Bambora card-terminal if it is used. Null otherwise."
                },
                "accountno": {
                  "type": "string",
                  "nullable": true,
                  "example": "1234",
                  "description": "The account where the payment has been posted. If not applicable, it will be null."
                },
                "giftcardtype": {
                  "type": "string",
                  "nullable": true,
                  "example": "1234",
                  "description": "The giftcard type if a giftcard is used. Null otherwise."
                },
                "provider": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "giftcardissued": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": "100",
            "description": "The total amount issued on giftcards."
          },
          "giftcardused": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": "-100",
            "description": "The total amount spent via giftcards."
          },
          "returnsum": {
            "type": "number",
            "format": "double",
            "example": -100,
            "description": "The total sum of returned articles"
          },
          "economicinvoicesum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": "",
            "description": "\"The sum of payments paid with  economic invoices.\""
          },
          "totalvat": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "The total VAT"
          },
          "totalvatbypercentage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VATByPercentage"
            },
            "description": "VAT by each percentage"
          },
          "totalcostprice": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 123.45,
            "description": "The total cost price"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "This is a note",
            "description": "A text note"
          },
          "customerpaymentsum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "description": "The sum of the customerpayments"
          },
          "stockvalue": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 10,
            "description": "Stock value of the store's inventory at the time of the POS balance"
          }
        }
      },
      "VATByPercentage": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "format": "double",
            "example": 25
          },
          "amount": {
            "type": "number",
            "format": "double",
            "example": 420
          }
        }
      },
      "SearchPOSBalanceResponse": {
        "additionalProperties": false,
        "type": "object",
        "description": "The representation of a pos balance search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POSBalance"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of items found by the query."
          }
        }
      },
      "PaymentTypeRelation": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "title": {
            "type": "string",
            "example": "Cash",
            "description": "The type of payment"
          },
          "paymenttypeid": {
            "type": "integer",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "example": 123.45,
            "description": "The amount of the payment type."
          },
          "cash": {
            "type": "integer",
            "example": 0,
            "description": "Returns whether or not the payment type is cash-based."
          },
          "bamdesk_messageid": {
            "type": "integer",
            "nullable": true,
            "example": 4343,
            "description": "The id for the messageid for Bambora card-terminal if it is used. Null otherwise."
          },
          "accountno": {
            "type": "string",
            "nullable": true,
            "example": "1234",
            "description": "The account where the payment has been posted. If not applicable, it will be null."
          },
          "currency": {
            "type": "string",
            "nullable": true,
            "example": "DKK"
          },
          "exchangerate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "receipts": {
            "type": "array",
            "nullable": true,
            "description": "Index for where it's stored.",
            "items": {
              "type": "string"
            }
          },
          "receiptsCount": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "mobilepayid": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true,
            "enum": [
              "mobilepay",
              "bamdesk",
              "nets"
            ]
          },
          "status": {
            "type": "string",
            "default": "captured",
            "enum": [
              "initiated",
              "reserved",
              "cancelled",
              "captured"
            ]
          }
        }
      },
      "PaymentArticle": {
        "type": "object",
        "additionalProperties": false,
        "description": "The repsentation of a POS article If you want to issue gift card, sell a product with productno either 'giftcard', 'voucher', or 'deposit'. Quantity must be 1 If you want to return a giftcard set giftcardid and quantity to -1.  Price must be positive If you want to use a giftcard set giftcardid and quantity to 1. Price must be be negative any other value for quantiy and price for giftcards will fail.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique ID",
            "nullable": true
          },
          "title": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "costprice": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "description": "cost price at the time of payment"
          },
          "quantity": {
            "type": "number"
          },
          "vat": {
            "type": "number",
            "example": 25
          },
          "giftcardno": {
            "type": "string",
            "nullable": true,
            "description": "Giftcardno used as means of payment"
          },
          "usedGiftcardId": {
            "nullable": true,
            "type": "integer",
            "description": "id of used as mean of payment"
          },
          "usedGiftcard": {
            "nullable": true,
            "$ref": "#/components/schemas/Giftcard"
          },
          "giftcardid": {
            "nullable": true,
            "type": "integer",
            "description": "Id of issued giftcard"
          },
          "giftcard": {
            "nullable": true,
            "readOnly": true,
            "$ref": "#/components/schemas/Giftcard"
          },
          "productno": {
            "type": "string",
            "nullable": true,
            "description": "For legacy support, instead refer to product.productno. This is only used for voucher and deposit",
            "example": "voucher"
          },
          "productid": {
            "type": "integer",
            "nullable": true
          },
          "product": {
            "nullable": true,
            "description": "A reference to the product in the current state",
            "$ref": "#/components/schemas/Product"
          },
          "taskmaterialid": {
            "nullable": true,
            "description": "Task Material ID",
            "type": "integer"
          },
          "discount_ppm_id": {
            "type": "number",
            "nullable": true,
            "readOnly": true,
            "description": "If the article has a discount. This will be a reference to the discount article"
          },
          "discountToken": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "example": 0.3423,
            "writeOnly": true
          },
          "discountedToken": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "writeOnly": true,
            "example": 0.3423,
            "nullable": true,
            "description": "If you want to apply a discount to this article, discountToken on the discount must match disccountedToken"
          }
        }
      },
      "POSPayment": {
        "type": "object",
        "additionalProperties": false,
        "description": "The repsentation of a POS sale",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "A unique payment ID"
          },
          "paymentno": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "a sequential autoincremented payment no"
          },
          "userid": {
            "type": "integer",
            "nullable": true,
            "example": 1,
            "readOnly": true,
            "description": "The id of the user who did the payment"
          },
          "customerid": {
            "type": "integer",
            "example": 1,
            "nullable": true,
            "description": "The id of the customer if any was attached to the payment"
          },
          "date": {
            "readOnly": true,
            "nullable": true,
            "maxLength": 255,
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "The date of the payment"
          },
          "numberofmaterials": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "example": 1,
            "description": "the number of materials on the payment"
          },
          "sum": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "readOnly": true,
            "example": 1,
            "description": "The sum of the payment materials"
          },
          "cashRegisterId": {
            "type": "integer",
            "nullable": true,
            "example": 1,
            "description": "the id of the cash register used for the payment"
          },
          "cashRegisterTitle": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "example": "Workshop",
            "description": "the title of posregister. Only here for legacy reasons"
          },
          "invoice": {
            "type": "integer",
            "readOnly": true,
            "example": 0,
            "description": "1 if payment is a invoice payment e.g. via economic"
          },
          "customerpayment": {
            "type": "integer",
            "readOnly": true,
            "example": 0,
            "description": "1 if payment is a customerpayment"
          },
          "cashregister": {
            "additionalProperties": false,
            "readOnly": true,
            "nullable": true,
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "id": {
                "type": "number"
              }
            }
          },
          "user": {
            "readOnly": true,
            "additionalProperties": false,
            "nullable": true,
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "number"
              }
            }
          },
          "customer": {
            "nullable": true,
            "readOnly": true,
            "$ref": "#/components/schemas/Customer",
            "description": "The customer refered to by customerid"
          },
          "articles": {
            "type": "array",
            "nullable": true,
            "description": "Payment articles. Only provided if ?extra=1",
            "items": {
              "$ref": "#/components/schemas/PaymentArticle"
            }
          },
          "taskids": {
            "type": "array",
            "nullable": true,
            "description": "If the payment is a payment of more tasks. Using this will mark the tasks as paid",
            "items": {
              "type": "integer"
            }
          },
          "paidwithcash": {
            "type": "number",
            "readOnly": true,
            "nullable": true
          },
          "paymenttypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentTypeRelation"
            }
          },
          "cash": {
            "type": "integer",
            "nullable": true,
            "description": "1 if you payed with cash, 0 if you didn't"
          },
          "storeid": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "Included when partner store payments are included"
          }
        }
      },
      "SearchPOSPaymentResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a pos payment search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POSPayment"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of items found by the query."
          }
        }
      },
      "POSPaymentResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a product.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/POSPayment"
          }
        }
      },
      "POSRegister": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique POS register id"
          },
          "title": {
            "type": "string",
            "example": "Register",
            "maxLength": 255,
            "description": "The name of a register"
          },
          "paymenttypes": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentType"
            },
            "description": "A list of payment types associated with this POS register"
          },
          "bamdeskdevices": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BamdeskDevice"
            },
            "description": "A list of bamdesk devices associated with this POS register"
          }
        }
      },
      "SetPOSRegister": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used to create/update a POS register.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/POSRegister"
          }
        }
      },
      "SetPOSRegisterResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/POSRegister"
          }
        }
      },
      "POSRegisterResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POSRegister"
            }
          }
        }
      },
      "ProductMasterData": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a product master data (stamdata).",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "A unique entry ID"
          },
          "suppliername": {
            "type": "string",
            "example": "DanishBikeSupplier",
            "maxLength": 255,
            "description": "Name of supplier"
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Name of product"
          },
          "productno": {
            "type": "string",
            "nullable": false,
            "description": "Product id"
          },
          "barcode": {
            "type": "string",
            "nullable": true,
            "description": "Barcode"
          },
          "brand": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Brand"
          },
          "suggestedprice": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "description": "The suggested price"
          },
          "price": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "description": "The actual price"
          },
          "color": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Color"
          },
          "size": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Size"
          },
          "vat": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "example": 25,
            "description": "VAT in percent"
          },
          "industry": {
            "type": "string",
            "maxLength": 255,
            "nullable": false,
            "example": "bikeshop",
            "description": "Industry. Examples: bikeshop, garden, phone, jewelry, generic."
          },
          "country": {
            "type": "string",
            "maxLength": 255,
            "nullable": false,
            "readOnly": false,
            "example": "dk",
            "description": "Country. Examples: dk, en."
          },
          "year": {
            "nullable": true,
            "type": "integer",
            "example": 2019,
            "description": "Year"
          },
          "lastupdate": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "readOnly": true,
            "description": "Date time of the last time this entry was updated"
          },
          "customfield1": {
            "type": "string",
            "nullable": true,
            "example": "Gear"
          },
          "customfield2": {
            "type": "string",
            "nullable": true,
            "example": "123123"
          },
          "customfield3": {
            "type": "string",
            "nullable": true,
            "example": "123123"
          }
        }
      },
      "ProductMasterDataResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of product master data (response).",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ProductMasterData"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "SetProduct": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used to create/update products.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Product"
          },
          "saveinwoocommerce": {
            "type": "boolean",
            "default": false,
            "description": "Legacy property. Ignored"
          },
          "resthookmetadata": {
            "type": "string",
            "maxLength": 255,
            "default": "{}",
            "description": "The string content has to be valid JSON. It can contain whatever meta data  a resthook could use. For example, 'syncproductdatawebshop' could be set to true, so the  function, that receives the resthook, knows whether or not to sync a given product."
          },
          "stocktransactionreason": {
            "type": "string",
            "maxLength": 255,
            "description": "The reason why the product stock was updated. This will be saved in the product stock transaction log."
          },
          "stocknochangeisrelative": {
            "type": "boolean",
            "default": false,
            "description": "If true, the Product.stockno update is interpreted as relative to its previous value; for example, if the previous value was 40 and you pass Product.stockno=42, it's interpreted as adding 2 (e.g. receiving 2 items from a supplier), and if you pass Product.stockno=38, it's interpreted as removing 2 (e.g. selling 2 items). If stocknochangeisrelative is false, the change is interpreted as absolute, e.g. with the intention of setting the initial value or correcting a wrong number. Note it has no direct effect on how ServicePOS functions; Product.stockno will always be set to the specified value; but it affects REST hooks (product.updated events) and 3rd party integrations if they distinguish between absolute and relative changes in the number of items in stock. See also stocknochangetype in Product."
          },
          "orderid": {
            "type": "integer",
            "description": "A reference to the shopping list item id for which this product stock has been updated."
          },
          "setatpartners": {
            "type": "boolean",
            "default": false,
            "description": "Create/update relavant product data at partner stores"
          }
        }
      },
      "Products": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "If there exists a result page after the current page. Use this to create a 'next page' functionality"
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "description": "The representation of a product.",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "Product": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a product. Notice the FlexPOS fields are only relevant for customers using FlexPOS",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "A unique product ID"
          },
          "title": {
            "type": "string",
            "example": "Scott Scale 960",
            "maxLength": 255,
            "description": "Product name"
          },
          "productno": {
            "maxLength": 255,
            "type": "string",
            "description": "The product no. This must be unique. If serieno is set we allow multiple products to have the same product no. For new products this value must be at most 25 chars"
          },
          "barcode": {
            "nullable": true,
            "maxLength": 255,
            "description": "A unique barcode",
            "type": "string"
          },
          "serieno": {
            "nullable": true,
            "maxLength": 255,
            "type": "string"
          },
          "price": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "example": 99.95,
            "description": "Price of the product incl. VAT"
          },
          "costprice": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "example": 8.65,
            "description": "Cost price of the product excl. VAT"
          },
          "stockno": {
            "nullable": true,
            "type": "integer",
            "description": "Number of items in stock. Set to null to disable stock keeping. If you want update stock, create a stock transaction. For more info see stocktransaction overwrite"
          },
          "previousstockno": {
            "readOnly": true,
            "type": "integer",
            "description": "Previous stockno value. Only set in RestHook events; in product.updated if stockno has changed; and always in product.created with a value of 0",
            "nullable": true
          },
          "stocknochangetype": {
            "readOnly": true,
            "type": "string",
            "enum": [
              "absolute",
              "relative"
            ],
            "nullable": true,
            "description": "Type of stockno change. Only set in RestHook events; in product.updated if stockno has changed; and always in product.created with a value of 'absolute'. When relative it indicates adding or removing (e.g. selling) items from inventory. When absolute it indicates taking inventory, e.g. setting an initial value or correcting an errornous value. See also stocknochangeisrelative in SetProduct."
          },
          "stockmin": {
            "type": "integer",
            "nullable": true
          },
          "stockmax": {
            "nullable": true,
            "type": "integer"
          },
          "suppliername": {
            "nullable": true,
            "readOnly": true,
            "maxLength": 255,
            "type": "string",
            "description": "This field is obsolete and therefore can't add a supplier using this field. If you want to add a supplier use the \"suppliers\" field instead"
          },
          "suppliers": {
            "nullable": true,
            "type": "array",
            "description": "List of suppliers attached to the product. If you leave supplier id empty, any suppliername that does not exits will be created.",
            "items": {
              "$ref": "#/components/schemas/Supplier"
            }
          },
          "color": {
            "nullable": true,
            "maxLength": 255,
            "type": "string"
          },
          "styleno": {
            "nullable": true,
            "maxLength": 255,
            "type": "string"
          },
          "size": {
            "nullable": true,
            "maxLength": 255,
            "type": "string"
          },
          "brand": {
            "nullable": true,
            "maxLength": 255,
            "type": "string"
          },
          "vat": {
            "nullable": true,
            "type": "number",
            "format": "double",
            "description": "The VAT of the product in percent. Should in most cases be NULL. NULL will default the VAT value to the one specified in store config (25 % for DK customers)"
          },
          "lastordered": {
            "readonly": true,
            "nullable": true,
            "maxLength": 255,
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "The date for when the product was last ordered. Can only be set while create a shoppinglistorder"
          },
          "tags": {
            "type": "array",
            "default": [],
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            },
            "description": "List of product tags.  Hint, if you leave tag id empty, any tag that does not exist will be created."
          },
          "customfield1": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Field for custom product data"
          },
          "customfield2": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "customfield3": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "created": {
            "readOnly": true,
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}"
          },
          "reservedstock": {
            "readOnly": true,
            "nullable": true,
            "type": "integer",
            "description": "Number of items of this product reserved on open work cards"
          },
          "tobeordered": {
            "readOnly": true,
            "nullable": true,
            "type": "integer",
            "description": "Number of items that needs to be ordered. Based on stockmin, stockmax and whats already on shopping list."
          },
          "onshoppinglist": {
            "readOnly": true,
            "nullable": true,
            "type": "integer",
            "description": "Number of items already on shopping list."
          },
          "ordered": {
            "readOnly": true,
            "type": "integer",
            "nullable": true,
            "description": "Number of items currently in order"
          },
          "needsordering": {
            "readOnly": true,
            "nullable": true,
            "type": "integer",
            "description": "True if the product is in low stock and needs to be ordered.  Based on stockmin, stockmax and whats already in order."
          },
          "flexposuid": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "readOnly": true,
            "description": "FlexPOS UID. Should mostly be left untouched"
          },
          "flexposviewgroup": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "readOnly": true,
            "description": "FlexPOS view group. Should mostly be left untouched. Must be in sync with flexposviewgroupid"
          },
          "flexposviewgroupid": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "FlexPOS view group id. Should mostly be left untouched"
          },
          "flexposfinancegroup": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "FlexPOS finance group. Should mostly be left untouched. Must be in sync with flexposfinancegroup"
          },
          "flexposfinancegroupid": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "FlexPOS finance group id. Should mostly be left untouched. Must be in sync with flexposfinancegroup"
          },
          "flexposbrandid": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "FlexPOS brand id. Should mostly be left untouched. Must be in sync with brand"
          },
          "discountprice": {
            "type": "number",
            "nullable": true,
            "description": "The discounted price of the product"
          }
        },
        "required": [
          "title",
          "productno"
        ]
      },
      "SearchProductResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a product search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of products found by the query if ignoring pagination. Is null if `count` was not specified in the query parameter."
          },
          "hasMore": {
            "type": "boolean",
            "description": "True if there are more products to receive than the current pagination allowed."
          }
        }
      },
      "ProductTag": {
        "type": "object",
        "additionalProperties": false,
        "description": "A product tag",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the tag"
          },
          "id": {
            "type": "integer",
            "nullable": true,
            "description": "The ID of the tag"
          },
          "accountno": {
            "type": "integer",
            "nullable": true,
            "description": "The accountno used for book keeping"
          }
        }
      },
      "ProductTagResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "A product tag response",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ProductTag"
          }
        }
      },
      "ProductTagListResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The product tags used by a store.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of product tags found"
          }
        }
      },
      "SearchPromotionResponse": {
        "type": "object",
        "description": "The representation of a promotion search.",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            }
          },
          "count": {
            "type": "integer",
            "example": 1,
            "description": "The total number of promotions found by the query if ignoring pagination."
          }
        }
      },
      "Promotion": {
        "type": "object",
        "description": "Object representing a promotion.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "example": 123,
            "description": "A unique ID. Use this to handle this subscription."
          },
          "name": {
            "type": "string",
            "example": "Summer discount",
            "description": "Short name for the promotion"
          },
          "description": {
            "type": "string",
            "default": "",
            "nullable": true,
            "example": "10% on all bikes in the summer.",
            "description": "Description of the promotion. This is only displayed in the controlpanel, not for the customers."
          },
          "active": {
            "type": "integer",
            "enum": [
              0,
              1
            ],
            "default": 1,
            "nullable": true,
            "example": 1,
            "description": "Whether or not the promotion is enabled. Disabled promotions do not trigger even when inside the date range."
          },
          "startdate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "nullable": true,
            "example": "2019-01-01 12:00:00",
            "description": "Specifies when the promotion starts. Null if the promotion has no startdate and thus is always in effect (except if active is 0)."
          },
          "enddate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "nullable": true,
            "example": "2019-02-01 12:00:00",
            "description": "Specifies when the promotion ends. Null if the promotion has no enddate."
          },
          "minproducts": {
            "type": "integer",
            "nullable": true,
            "example": 1,
            "description": "Minimum number of prodcts before the promotion is in effect",
            "default": 1
          },
          "productfilters": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PromotionProductFilter"
            }
          },
          "customerfilters": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PromotionCustomerFilter"
            }
          },
          "articles": {
            "nullable": true,
            "readOnly": true,
            "description": "A list of products from the cart that match the promotion. This will only be set in the case of the lookup endpoint.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartArticle"
            }
          },
          "productno_counts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "productno": {
                  "type": "string",
                  "nullable": true
                },
                "count": {
                  "type": "number",
                  "nullable": true
                }
              }
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "The number of times this promotion matches things in the cart. This will only be set in the case of the lookup endpoint."
          },
          "action": {
            "$ref": "#/components/schemas/PromotionAction"
          }
        }
      },
      "PromotionFilter": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PromotionProductFilter"
          },
          {
            "$ref": "#/components/schemas/PromotionCustomerFilter"
          }
        ]
      },
      "PromotionProductFilter": {
        "type": "object",
        "description": "Filter promotion based on different product attributes.",
        "additionalProperties": false,
        "properties": {
          "attribute": {
            "type": "string",
            "enum": [
              "product_productno",
              "product_tag",
              "product_brand"
            ],
            "example": "tag",
            "description": "What attribute to filter the promotion on."
          },
          "value": {
            "anyOf": [
              {
                "type": "string",
                "example": "Bike",
                "description": "The value that the attribute needs to have to match.",
                "nullable": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "Bike",
                  "Gear"
                ],
                "description": "A list of possible values. The attribute needs to match at least one of the values for the rule to apply.",
                "nullable": true
              }
            ],
            "example": "Bike"
          }
        }
      },
      "PromotionCustomerFilter": {
        "type": "object",
        "description": "Filter promotion based on different customer attributes.",
        "additionalProperties": false,
        "properties": {
          "attribute": {
            "type": "string",
            "enum": [
              "customer_id",
              "customer_tag"
            ],
            "example": "tag",
            "description": "What attribute to filter the promotion on."
          },
          "value": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "1",
                  "2",
                  "3"
                ],
                "description": "A list of possible values. The attribute needs to match at least one of the values for the rule to apply."
              },
              {
                "type": "string",
                "example": "1",
                "description": "The value that the attribute needs to have to match."
              }
            ]
          }
        }
      },
      "PromotionAction": {
        "type": "object",
        "description": "The action / effect the promotion has on checkout.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "percentage",
              "adjustPriceBy",
              "percentageByCostprice",
              "totalPrice",
              "totalPriceUnit"
            ],
            "example": "percentage",
            "description": "The type of the action."
          },
          "amount": {
            "type": "number",
            "format": "double",
            "example": 10,
            "description": "The amount to be deducted, depending on the `type`."
          }
        }
      },
      "PromotionLookup": {
        "type": "object",
        "description": "The object used to query for relevant promotions based on products and customers.",
        "additionalProperties": false,
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "example": "123"
                },
                {
                  "$ref": "#/components/schemas/CartArticle"
                }
              ]
            },
            "description": "List of productnos."
          },
          "allowInactive": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether or not the lookup should find promotions which are inactive"
          },
          "customer": {
            "type": "integer",
            "nullable": true,
            "example": 42,
            "description": "The id of the customer. Can be null, if returned promotions should be relevant for all customers."
          }
        }
      },
      "PromotionLookupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Promotion"
            }
          },
          "count": {
            "type": "number",
            "required": false,
            "nullable": true,
            "description": "Count of returned entries"
          }
        }
      },
      "CartArticle": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "productno": {
            "type": "string",
            "example": "456",
            "nullable": true,
            "description": "The product number of the product that the article represents."
          },
          "quantity": {
            "type": "number",
            "nullable": true,
            "example": 5,
            "description": "The amount that is present of that product."
          }
        }
      },
      "BillingModules": {
        "type": "object",
        "description": "for each module, true if the module is active and subscription is active",
        "additionalProperties": false,
        "properties": {
          "stock": {
            "type": "boolean"
          },
          "calendar": {
            "type": "boolean"
          },
          "tags": {
            "type": "boolean"
          },
          "pricetags": {
            "type": "boolean"
          },
          "productfields": {
            "type": "boolean"
          },
          "statistics": {
            "type": "boolean"
          },
          "pos": {
            "type": "boolean"
          },
          "masterdata": {
            "type": "boolean"
          },
          "economic": {
            "type": "boolean"
          },
          "dinero": {
            "type": "boolean"
          },
          "woocommerce": {
            "type": "boolean"
          },
          "pricelabel": {
            "type": "boolean"
          },
          "giftcard": {
            "type": "boolean"
          },
          "promotion": {
            "type": "boolean"
          },
          "parksale": {
            "type": "boolean"
          },
          "customfilters": {
            "type": "boolean"
          },
          "userpermissions": {
            "type": "boolean"
          },
          "task_google_maps": {
            "type": "boolean"
          },
          "variations": {
            "type": "boolean"
          },
          "mobilepay": {
            "type": "boolean"
          },
          "servicewidget": {
            "type": "boolean"
          }
        }
      },
      "Billing": {
        "type": "object",
        "description": "A PrintDesk device object",
        "additionalProperties": false,
        "properties": {
          "inTrial": {
            "type": "boolean",
            "description": "If store does not have active subscription and trail is not expired"
          },
          "outOfTasks": {
            "type": "boolean",
            "description": "True if maxTasks has been exceeded"
          },
          "isPaying": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the customer is currently being charged for the plan. E.g. not on trail or any other free payment option."
          },
          "maxTasks": {
            "type": "integer",
            "nullable": true,
            "description": "Maximum number of tasks for billings periode"
          },
          "active": {
            "nullable": true,
            "type": "boolean",
            "description": "true if account is active. Will false if payment is missing"
          },
          "deactivationDate": {
            "type": "string",
            "nullable": true,
            "description": "ate for when active will be or was set to false"
          },
          "showWarning": {
            "type": "boolean",
            "nullable": false,
            "description": "True if subscription shoud be warning.  For example if invoices have not been paid"
          },
          "showWarningDate": {
            "type": "string",
            "nullable": true,
            "description": "Date for when showarning will be or was set to true"
          },
          "activeModules": {
            "$ref": "#/components/schemas/BillingModules"
          },
          "subscription": {
            "type": "object",
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "addOns": {
                "$ref": "#/components/schemas/BillingModules"
              },
              "activeCard": {
                "type": "boolean",
                "nullable": true
              },
              "startDate": {
                "type": "string",
                "nullable": true
              },
              "paymentmethod": {
                "type": "string",
                "enum": [
                  "card",
                  "invoice"
                ],
                "description": "The payment method"
              },
              "derivedplan": {
                "type": "string",
                "enum": [
                  "small",
                  "medium",
                  "large",
                  "manual"
                ],
                "description": "The plan name"
              },
              "plan": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "small_monthly",
                  "medium_monthly",
                  "large_monthly",
                  "small_monthly_invoice",
                  "medium_monthly_invoice",
                  "large_monthly_invoice",
                  "manual"
                ],
                "description": "The plan name in Reepay"
              }
            }
          }
        }
      },
      "ConfigAPI": {
        "type": "object",
        "description": "A config. For a complete list refer to https://app.deltateq.com/doc/api/configs.php",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "SetConfigs": {
        "type": "object",
        "description": "The body of the request used to create/update configs.",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigAPI"
            }
          },
          "targetStoreId": {
            "type": "number",
            "nullable": true,
            "description": "If supplied, will be used as the target store to set storeconfigs (only if the apitoken has adequate permission)."
          }
        }
      },
      "GetConfigs": {
        "type": "object",
        "description": "Get configs",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigAPI"
            }
          },
          "targetStoreId": {
            "type": "number",
            "nullable": true,
            "description": "If supplied, will be used as the target store to set storeconfigs (only if the source apitoken has adequate permission)."
          }
        }
      },
      "PartnerStores": {
        "type": "object",
        "description": "partner stores",
        "properties": {
          "viewstock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Store"
            }
          },
          "saveproduct": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Store"
            }
          },
          "sharecustomer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Store"
            }
          },
          "inventorymove": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Store"
            }
          }
        }
      },
      "PrintDeskSettings": {
        "type": "object",
        "description": "PrintDesk settings object",
        "properties": {
          "derivedDevices": {
            "description": "Array of each print desk device's settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrintDeskDevice"
            }
          }
        }
      },
      "PrintDeskDevice": {
        "type": "object",
        "description": "A PrintDesk device object",
        "properties": {
          "ip": {
            "type": "string",
            "nullable": true
          },
          "derivedStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "active",
              "disconnected"
            ]
          },
          "deviceid": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "ts": {
            "type": "string",
            "nullable": true
          },
          "platform": {
            "type": "string",
            "nullable": true,
            "enum": [
              "darwin",
              "win32",
              "linux"
            ]
          },
          "printers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrintDeskPrinter"
            }
          }
        }
      },
      "PrintDeskPrinter": {
        "type": "object",
        "description": "A PrintDesk printer object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "deviceName, see https://www.electronjs.org/docs/api/web-contents#contentsprintoptions-callback"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "enum": [
              "active",
              "unknown"
            ]
          }
        }
      },
      "ServiceNotification": {
        "type": "object",
        "description": "scheduled service call done via sms",
        "additionalProperties": false,
        "properties": {
          "days": {
            "type": "integer",
            "description": "if isAbsolute is false, send notification after days",
            "example": 270,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "isAbsolute": {
            "type": "boolean",
            "description": "if true, use day, month, and year to specifiy absolute day for service notification. Days is ignored",
            "nullable": true
          },
          "day": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "month": {
            "type": "string",
            "nullable": true,
            "example": "April"
          },
          "year": {
            "type": "integer",
            "nullable": true,
            "example": 1,
            "description": "After how many years?"
          },
          "title": {
            "description": "Use for customt itle",
            "type": "string",
            "nullable": true
          },
          "noticedate": {
            "type": "string",
            "nullable": true,
            "readonly": true,
            "description": "Date when the service call will be send out relative today. Computed from",
            "example": "2021-05-23T12:00:00+02:00"
          },
          "template": {
            "type": "string",
            "description": "SMS template for the service call",
            "nullable": true,
            "example": "Hej [customer_name] det er tid til første service af din nye cykel. Kig ind eller ring til os på [store_phone]2"
          }
        }
      },
      "Store": {
        "type": "object",
        "description": "Store object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer"
          },
          "title": {
            "type": "string",
            "nullable": false
          },
          "cityname": {
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "type": "string",
            "nullable": true
          },
          "streetname": {
            "type": "string",
            "nullable": true
          },
          "streetno": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "nullable": false,
            "readOnly": true
          }
        }
      },
      "SettingsAPI": {
        "type": "object",
        "properties": {
          "billing": {
            "$ref": "#/components/schemas/Billing"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigAPI"
            }
          },
          "servicenotifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceNotification"
            }
          },
          "printDesk": {
            "$ref": "#/components/schemas/PrintDeskSettings"
          },
          "appConfigs": {
            "$ref": "#/components/schemas/AppConfigs"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomProductField"
            }
          },
          "featureFlags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          "partners": {
            "$ref": "#/components/schemas/PartnerStores"
          }
        }
      },
      "CustomProductField": {
        "type": "object",
        "properties": {
          "key": {
            "nullable": false,
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "requiredCustomerArticle": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "AppConfigs": {
        "type": "object",
        "properties": {
          "economic_appPublicToken": {
            "nullable": true,
            "type": "string"
          },
          "ReePayPublicKey": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "SetShoppingListItem": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used to create/update a shopping list item.",
        "properties": {
          "partnerstoreid": {
            "type": "number",
            "description": "The store id of the store that item is moved to. Stock movements are recieved as shopping list orders. The store id must be on the store's stock partner list."
          },
          "content": {
            "$ref": "#/components/schemas/ShoppingListItem"
          }
        }
      },
      "ShoppingListItem": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a shopping list item. The shopping list is a set of products the store must rememeber to order from a supplier.",
        "properties": {
          "id": {
            "type": "integer",
            "readonly": true,
            "nullable": true,
            "description": "A unique ID"
          },
          "productid": {
            "type": "integer",
            "nullable": true,
            "description": "a reference to the product"
          },
          "supplierid": {
            "type": "integer",
            "nullable": true,
            "description": "The supplierid attached to the order"
          },
          "amount": {
            "type": "integer",
            "description": "The number of items to buy"
          },
          "added": {
            "readonly": true,
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "when added to the list"
          },
          "materialid": {
            "type": "integer",
            "nullable": true,
            "description": "a reference to the task material"
          },
          "taskid": {
            "type": "integer",
            "nullable": true,
            "description": "a reference to the task of the material"
          },
          "orderlistno": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "The orderlist no of the attached orderlist"
          },
          "orderlistid": {
            "type": "integer",
            "nullable": true,
            "readonly": true,
            "description": "The order id if the shopping list item has been ordered. Can only be set while creating a shopping list order."
          },
          "delivereddate": {
            "readonly": true,
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "when item has delivered to stock. Specificied by setting orderid when updating product."
          },
          "product": {
            "readOnly": true,
            "description": "The product refered to by productid",
            "$ref": "#/components/schemas/Product"
          },
          "received": {
            "readOnly": true,
            "type": "integer",
            "nullable": true,
            "description": "Amount of items that are received"
          },
          "inorder": {
            "readOnly": true,
            "type": "integer",
            "nullable": true,
            "description": "Amount of items that are not received"
          },
          "receivedstatus": {
            "$ref": "#/components/schemas/ShoppingListReceivedStatus"
          },
          "material": {
            "nullable": true,
            "$ref": "#/components/schemas/TicketMaterial"
          },
          "expecteddelivery": {
            "nullable": true,
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}"
          }
        },
        "required": [
          "amount"
        ]
      },
      "SearchShoppingListResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a shopping list search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingListItem"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of items found by the query."
          }
        }
      },
      "ShoppingListItemResponse": {
        "additionalProperties": false,
        "type": "object",
        "description": "The representation of a product.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ShoppingListItem"
          }
        }
      },
      "ShoppingListOrder": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a shopping list order item. An order is at set of shopping list items that have been ordered",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique ID"
          },
          "orderlistno": {
            "type": "integer",
            "readOnly": true,
            "description": "The number of orderlistno (unique for storeid)"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "description": "A note"
          },
          "orderdate": {
            "readonly": true,
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "date when ordered"
          },
          "orderids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "receiveditems": {
            "readonly": true,
            "type": "integer",
            "description": "Number of shopping list items which have been received"
          },
          "itemcount": {
            "readonly": true,
            "type": "integer",
            "description": "Total number of shopping list items on the order"
          },
          "supplierid": {
            "readOnly": true,
            "type": "integer",
            "nullable": true,
            "description": "Supplierid attached to the OrderList"
          },
          "suppliers": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Supplier"
            }
          },
          "totalamount": {
            "readOnly": true,
            "type": "integer",
            "description": "Total amount of items that needs to be ordered"
          },
          "totalreceived": {
            "readOnly": true,
            "type": "integer",
            "description": "Total amount of received items"
          },
          "totalinorder": {
            "readOnly": true,
            "type": "integer",
            "description": "Total amount of items that are still in order"
          },
          "completed": {
            "readOnly": true,
            "type": "boolean",
            "description": "1 if the order is completed, 0 otherwise"
          },
          "delivereddate": {
            "readOnly": true,
            "type": "string",
            "nullable": true,
            "description": "Date of latest received item if completed"
          }
        },
        "required": [
          "orderids"
        ]
      },
      "SetShoppingListOrder": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used to create/update a shopping list item.",
        "properties": {
          "partnerstoreid": {
            "type": "number",
            "descrption": "see movestocktostoreid in SetShoppingListItem"
          },
          "content": {
            "$ref": "#/components/schemas/ShoppingListOrder"
          }
        },
        "required": [
          "content"
        ]
      },
      "SearchShoppingListOrderResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The representation of a shopping list search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingListOrder"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of items found by the query."
          }
        }
      },
      "ShoppingListReceivedStatus": {
        "type": "string",
        "enum": [
          "completed",
          "partial",
          "none"
        ]
      },
      "ShoppingListTotalCostPrice": {
        "type": "object",
        "properties": {
          "totalcostprice": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "description": "Total cost price of an shopping list"
      },
      "ShoppingListTotalCostPriceResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ShoppingListTotalCostPrice"
          }
        }
      },
      "SearchStockTransactionResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response of a stock transaction search.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTransaction"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "description": "The total number of items found by the query if ignoring pagination."
          }
        }
      },
      "StockTransaction": {
        "type": "object",
        "additionalProperties": false,
        "description": "Apply relative changes to a product. If the change is positive i.e. addtostock > 0 a per item cost price must be specified with costpriceofaddeditems. If addtostock > 0 no cost price must be specified. i.e. costpriceofaddeditems must be NULL. If addtostock = 0 you will get a 400 error. If you want to apply a absolute overwrite to a product stock. Set the value using PUT /product/{id}.",
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "A unique transaction ID"
          },
          "productid": {
            "type": "integer",
            "nullable": true,
            "description": "a reference to product ID."
          },
          "addtostock": {
            "nullable": true,
            "type": "integer",
            "description": "Number of items to add to the stock for the product. The value can be negative if some items are removed from the stock. If absoluteoverwrite is 1, the addtostock will be the difference between the new and old stockvalue."
          },
          "costpriceofaddeditems": {
            "nullable": true,
            "type": "number",
            "format": "double",
            "description": "The pr. unit cost price of the added items. Must be NULL if addtostock is negative."
          },
          "reason": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Freetext",
            "maxLength": 50
          },
          "stocktransactionlistid": {
            "nullable": true,
            "type": "integer",
            "description": "Stock transaction can be grouped into lists. And all applied as a single transaction. See stock transaction list."
          },
          "stocktransactionlist": {
            "nullable": true,
            "readonly": "true;",
            "$ref": "#/components/schemas/StockTransactionList",
            "description": "The list refered to by stocktransactionlistid"
          },
          "stocknoafter": {
            "nullable": true,
            "readonly": true,
            "type": "integer",
            "description": "The product stock right after the transaction was applied"
          },
          "absoluteoverwrite": {
            "type": "integer",
            "readonly": true,
            "description": "Indicates the stock transactions is an absolute adjustment of stock value and costprice. Any AVG calculation will start from the latest overwrite. You can do an absolute adjustment by changing costprice or stockno when updating a product using the product endpoint."
          },
          "pospaymentmaterial": {
            "type": "object",
            "nullable": true,
            "description": "payment material",
            "properties": {
              "paymentid": {
                "type": "integer"
              }
            }
          },
          "commit": {
            "type": "integer",
            "default": 1,
            "description": "Set to 1 if you want the stock transaction to be applied. Once commited a transaction cannot be changed. If the value is 0, the stock transaction is saved and can be committed by later setting commit = 1. Note, by default all stock transactions are committed. Use 0 to create draft transactions that will later be commiited."
          },
          "committeddate": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "Date when the stock transaction was commited. Null if not committed"
          },
          "createddate": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "Created date."
          },
          "product": {
            "nullable": true,
            "readOnly": true,
            "$ref": "#/components/schemas/Product",
            "description": "The product pointed to be productid. This is included for convenience."
          },
          "miscdata": {
            "type": "string",
            "nullable": true,
            "maxLength": 150,
            "description": "Use to save any misc data with the transaction. Misc data will be cleared when transaction is commited"
          },
          "pospaymentmaterialid": {
            "nullable": true,
            "type": "number",
            "readOnly": true,
            "description": "pospaymentmaterial id if transaction was triggered by a sale"
          },
          "orderid": {
            "nullable": true,
            "type": "number",
            "description": "set if the stock transaction was created from a shopping list item"
          },
          "order": {
            "nullable": true,
            "$ref": "#/components/schemas/ShoppingListItem"
          },
          "totalcostpricefifo": {
            "type": "number",
            "readonly": true,
            "nullable": true,
            "format": "double",
            "description": "Obsolete. No longer in use"
          },
          "costpriceavg": {
            "type": "number",
            "readonly": true,
            "nullable": true,
            "format": "double",
            "description": "the total cost price of the stock transction following average princip"
          },
          "totalstockvaluefifo": {
            "type": "number",
            "readonly": true,
            "nullable": true,
            "format": "double",
            "description": "Obsolete. No longer in use"
          },
          "totalstockvalueavg": {
            "type": "number",
            "nullable": true,
            "readonly": true,
            "format": "double",
            "description": "The total stock value of the product at the time of transaction following average princip"
          },
          "userid": {
            "nullable": true,
            "readOnly": true,
            "type": "integer",
            "description": "Id of user who made the stocktransaction"
          }
        }
      },
      "StockTransactionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/StockTransaction"
          }
        }
      },
      "SetStockTransaction": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used to create/update products.",
        "properties": {
          "partnerstoreid": {
            "type": "integer",
            "description": "Save transaction at partner store"
          },
          "content": {
            "$ref": "#/components/schemas/StockTransaction"
          }
        }
      },
      "SetStockTransactionList": {
        "type": "object",
        "additionalProperties": false,
        "description": "The body of the request used to create/update products.",
        "properties": {
          "partnerstoreid": {
            "type": "integer",
            "nullable": true,
            "description": "Save transaction at partner store"
          },
          "content": {
            "$ref": "#/components/schemas/StockTransactionList"
          }
        }
      },
      "StockTransactionList": {
        "type": "object",
        "additionalProperties": false,
        "description": "A list of stock transactions. Set commit = 1 to commit all transactions in a list.",
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "description": "A unique ID"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "a free text note"
          },
          "created": {
            "readOnly": true,
            "type": "string",
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "created date"
          },
          "committeddate": {
            "type": "string",
            "readonly": true,
            "nullable": true,
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "description": "If the inventory list is booked"
          },
          "commit": {
            "type": "integer",
            "readOnly": true,
            "default": 0,
            "description": "PUT with value 1 to commit all stock transactions in the list. If type == \"move\", a stock move is done, if type == \"reception\" a stock reception is done"
          },
          "movetostoreid": {
            "type": "integer",
            "nullable": true,
            "description": "The store id of the partner to move the stock to. Can only be set if type = move"
          },
          "fromstocktransactionlistid": {
            "type": "integer",
            "nullable": true,
            "description": ""
          },
          "orderlistno": {
            "type": "integer",
            "nullable": true,
            "description": "The orderlist no of the attached orderlist",
            "readOnly": true
          },
          "inventorycountreportid": {
            "type": "integer",
            "nullable": true,
            "description": "The  id of report that was created on inventory count",
            "readOnly": true
          },
          "reportno": {
            "type": "integer",
            "nullable": true,
            "description": "The report number of the attached report",
            "readOnly": true
          },
          "orderlistid": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the orderlistid which the stocktransaction list was created from"
          },
          "partnersyncdate": {
            "type": "string",
            "nullable": true,
            "description": "The date the stock transaction list was synced to an external service (e.g. E-conomic)"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "type": {
            "$ref": "#/components/schemas/StockTransactionListType"
          },
          "userid": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Id of the user who created/committed the stocktransaction"
          }
        }
      },
      "StockTransactionListType": {
        "type": "string",
        "enum": [
          "reception",
          "count",
          "move"
        ]
      },
      "StockTransactionListResponse": {
        "type": "object",
        "nullable": true,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/StockTransactionList"
          },
          "totalcostprice": {
            "type": "number",
            "description": "Sum of costprice"
          },
          "addtostocksum": {
            "type": "number",
            "description": "Sum of all `addtostock`"
          },
          "errors": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StockTransactionListResponseError"
            }
          }
        }
      },
      "StockTransactionListResponseError": {
        "type": "object",
        "properties": {
          "errorcode": {
            "type": "string",
            "description": "Identifier of the error",
            "enum": [
              "INVALID_PRODUCTS",
              "INVALID_STOCK_COUNT",
              "NO_MOVE_TARGET"
            ]
          },
          "message": {
            "type": "string",
            "description": "Description of the error"
          }
        }
      },
      "StockTransactionListSearchResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTransactionList"
            }
          },
          "count": {
            "type": "integer",
            "example": 5,
            "description": "Number of available items, if ignoring pagination."
          }
        }
      },
      "StockTransactionCommitRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StockTransactionCommitRequestCreateList"
          },
          {
            "$ref": "#/components/schemas/StockTransactionCommitRequestAddToList"
          }
        ]
      },
      "StockTransactionCommitRequestCreateList": {
        "type": "object",
        "required": [
          "mode",
          "paginationStart",
          "paginationLength"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "create_list"
            ]
          },
          "paginationStart": {
            "type": "number"
          },
          "paginationLength": {
            "type": "number"
          }
        }
      },
      "StockTransactionCommitRequestAddToList": {
        "type": "object",
        "required": [
          "mode",
          "failureList",
          "paginationStart",
          "paginationLength"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "add_to_list"
            ]
          },
          "failureList": {
            "type": "number"
          },
          "paginationStart": {
            "type": "number"
          },
          "paginationLength": {
            "type": "number"
          }
        }
      },
      "StockTransactionCommitResponse": {
        "type": "object",
        "properties": {
          "failed": {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "$ref": "#/components/schemas/StockTransaction"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              },
              "count": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "succeeded": {
            "type": "object",
            "nullable": true,
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              },
              "count": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "failedListId": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "SupplierRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Supplier"
          }
        }
      },
      "SupplierResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Supplier"
          }
        }
      },
      "ListSupplierResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Supplier"
            }
          }
        }
      },
      "Supplier": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true,
            "example": 1,
            "description": "A unique id for a supplier"
          },
          "name": {
            "type": "string",
            "example": "Johnson",
            "description": "The name of a supplier"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "johnson@doe.com",
            "description": "The mail of a supplier"
          },
          "customerno": {
            "type": "string",
            "nullable": true,
            "example": 2413,
            "description": "Customer number for the supplier"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "example": "A place",
            "description": "Address of the supplier"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "London",
            "description": "Which city the supplier is from"
          },
          "zipcode": {
            "type": "string",
            "nullable": true,
            "example": 2412,
            "description": "Zipcode of the supplier"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "example": "Sells bike parts"
          }
        }
      },
      "TicketFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique TicketFile",
            "example": 1
          },
          "taskid": {
            "type": "integer",
            "example": 1
          },
          "s3id": {
            "type": "string",
            "example": 1
          },
          "filename": {
            "type": "string",
            "example": "image.png"
          },
          "size": {
            "type": "integer",
            "example": 1024
          },
          "mime": {
            "type": "string",
            "example": "image/png"
          },
          "src": {
            "type": "string"
          }
        }
      },
      "TicketFileListResponse": {
        "type": "object",
        "description": "Response when requesting a list of task files based on some filters.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketFile"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "example": 5,
            "description": "Number of ticket comments"
          }
        }
      },
      "TicketFileResponse": {
        "type": "object",
        "description": "Response when requesting a task file",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketFile"
          }
        }
      },
      "SetTicketFile": {
        "type": "object",
        "description": "The body of the request used when creating / updating task files.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketFile"
          }
        }
      },
      "TicketMaterial": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique TicketMaterial ID",
            "nullable": true
          },
          "taskid": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Bike"
          },
          "amount": {
            "type": "number",
            "example": 5
          },
          "customerarticleid": {
            "type": "integer",
            "example": 1,
            "nullable": true
          },
          "customerarticle": {
            "nullable": true,
            "readOnly": true,
            "$ref": "#/components/schemas/CustomerArticle"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 100,
            "nullable": true
          },
          "productid": {
            "nullable": true,
            "type": "integer",
            "example": 1
          },
          "product": {
            "nullable": true,
            "readOnly": true,
            "$ref": "#/components/schemas/Product"
          },
          "productno": {
            "type": "string",
            "example": 1,
            "nullable": true
          },
          "discount_tm_id": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "usedGiftcardid": {
            "type": "integer",
            "example": 1,
            "nullable": true,
            "description": "If set, the material represents the use of giftcard for paying for the tasks"
          },
          "usedGiftcard": {
            "type": "object",
            "nullable": true,
            "description": "Gift card object",
            "$ref": "#/components/schemas/Giftcard"
          },
          "promotionid": {
            "type": "integer",
            "example": 1,
            "nullable": true,
            "description": "The promotion id of the that triggered the discount"
          },
          "deletedPromotionId": {
            "type": "integer",
            "example": 1,
            "readonly": true,
            "nullable": true,
            "description": "If a promotion is deleted, remember on the promoted material it has been deleted so we don't apply it again"
          },
          "expecteddeliveries": {
            "type": "array",
            "description": "List of dates, when the material is expected to be delivered from ongoing orders",
            "items": {
              "type": "string",
              "description": "The date of when the material is expected to be delivered"
            }
          }
        },
        "required": [
          "title",
          "taskid",
          "amount",
          "price"
        ]
      },
      "SetTicketMaterial": {
        "type": "object",
        "description": "The body of the request used for creating / updating TicketMaterials",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketMaterial"
          }
        }
      },
      "TicketMaterialListResponse": {
        "type": "object",
        "description": "Response when requesting a list of task materials based on some filters.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketMaterial"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "example": 5,
            "description": "Number of task materials"
          }
        }
      },
      "TicketMaterialResponse": {
        "type": "object",
        "description": "Response when requesting a list of task materials based on some filters.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketMaterial"
          }
        }
      },
      "TicketTagResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketTag"
          }
        }
      },
      "SetTicketTag": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketTag"
          }
        }
      },
      "TicketTag": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique ticket ID"
          },
          "label": {
            "type": "string",
            "example": "Bestillingsvarer"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "example": "#ff0039"
          }
        }
      },
      "SearchTicketTag": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTag"
            }
          }
        }
      },
      "TicketTemplateReponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketTemplate"
          }
        }
      },
      "SetTicketTemplate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TicketTemplate"
          }
        }
      },
      "TicketTemplateMaterialReponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTemplateMaterial"
            }
          }
        }
      },
      "TicketTemplate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique ticket ID"
          },
          "label": {
            "type": "string",
            "example": "Bestillingsvarer"
          },
          "group": {
            "type": "string",
            "example": "Front wheel"
          },
          "type": {
            "$ref": "#/components/schemas/TicketType"
          },
          "materials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTemplateMaterial"
            }
          }
        }
      },
      "SearchTicketTemplate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTemplate"
            }
          }
        }
      },
      "SearchTicketTemplateMaterial": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTemplateMaterial"
            }
          }
        }
      },
      "SetTicketTemplateMaterial": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTemplateMaterial"
            }
          }
        }
      },
      "TicketTemplateMaterial": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "productid": {
            "type": "integer"
          },
          "product": {
            "readOnly": true,
            "$ref": "#/components/schemas/Product"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "customprice": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "example": 99.95,
            "description": "Overwrite product price"
          }
        }
      },
      "Ticket": {
        "type": "object",
        "description": "A ticket representing a repair or work task.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "description": "A unique ticket ID"
          },
          "customerid": {
            "type": "integer",
            "example": 234,
            "description": "The ID of the customer.",
            "nullable": true
          },
          "customer": {
            "readOnly": true,
            "$ref": "#/components/schemas/Customer"
          },
          "customerarticleids": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true,
              "example": 789,
              "description": "The ID of the article associated with ticket (if any)."
            }
          },
          "customerarticles": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerArticle"
            }
          },
          "assignee": {
            "type": "integer",
            "nullable": true,
            "example": 555,
            "description": "The ID of the employee assigned to the ticket."
          },
          "createByUserId": {
            "type": "integer",
            "nullable": true,
            "example": 555,
            "description": "The ID of the employee who created the ticket."
          },
          "assigneeName": {
            "type": "string",
            "readOnly": true,
            "example": "Brian",
            "nullable": true,
            "description": "The name of the employee assigned to the ticket."
          },
          "cardno": {
            "type": "string",
            "example": "456",
            "description": "An ID for the ticket that is readable in the webapp."
          },
          "autoincrementno": {
            "type": "integer",
            "readOnly": true,
            "example": 100,
            "description": "A unique auto incrementing ID for the ticket"
          },
          "description": {
            "type": "string",
            "example": "Bremsejustering (bag)",
            "description": "A description of what will or has been done.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "readOnly": true,
            "example": "2018-08-01 14:00:00"
          },
          "startTime": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "nullable": true,
            "example": "2018-08-03 16:15:00"
          },
          "pickup": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}[T ]?\\d{2}:\\d{2}:\\d{2}",
            "nullable": true,
            "example": "2018-08-03 17:15:00"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POSPayment"
            }
          },
          "paid": {
            "type": "boolean",
            "readOnly": true
          },
          "agreedPrice": {
            "type": "number",
            "nullable": true,
            "format": "double",
            "example": 99.95,
            "description": "Price agreed with customer incl. VAT"
          },
          "numComments": {
            "type": "integer",
            "readOnly": true,
            "example": 3,
            "description": "How many comments exist on the ticket."
          },
          "totalPrice": {
            "type": "number",
            "readOnly": true,
            "format": "double",
            "example": 99.95,
            "description": "Total price of the all materials incl. VAT",
            "nullable": true
          },
          "draft": {
            "type": "integer",
            "example": 1,
            "description": "Whether or not the ticket is in draft mode"
          },
          "tags": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTag"
            }
          },
          "tagids": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "status": {
            "$ref": "#/components/schemas/TicketStatus"
          },
          "type": {
            "$ref": "#/components/schemas/TicketType"
          },
          "taskserviceid": {
            "type": "integer",
            "nullable": true,
            "description": "Id of a task service attached to the task"
          },
          "storeid": {
            "type": "integer",
            "nullable": false,
            "description": "ID of the owning store"
          }
        }
      },
      "TicketStatus": {
        "type": "string",
        "enum": [
          "new",
          "ready",
          "done",
          "awaiting",
          "cancelled",
          "draft"
        ]
      },
      "TicketType": {
        "type": "string",
        "enum": [
          "repair",
          "sale"
        ]
      },
      "TicketCountResponse": {
        "type": "object",
        "description": "Response when requesting a list tickets based on some filters.",
        "properties": {
          "new": {
            "type": "integer",
            "example": 5
          },
          "ready": {
            "type": "integer",
            "example": 2
          },
          "awaiting": {
            "type": "integer",
            "example": 7
          }
        }
      },
      "TicketListResponse": {
        "type": "object",
        "description": "Response when requesting a list tickets based on some filters.",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          },
          "count": {
            "type": "integer",
            "example": 5,
            "description": "Number of available tickets, if ignoring pagination."
          }
        }
      },
      "TicketResponse": {
        "type": "object",
        "description": "A ticket response",
        "properties": {
          "storeid": {
            "type": "integer"
          },
          "content": {
            "$ref": "#/components/schemas/Ticket"
          }
        }
      },
      "SetTicket": {
        "type": "object",
        "description": "The body of the request used for creating / updating tickets",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Ticket"
          }
        }
      },
      "UserRespond": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "User": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email"
          },
          "amount": {
            "type": "integer"
          },
          "shopuser": {
            "type": "integer",
            "description": "User is used for selling stuff",
            "enum": [
              0,
              1
            ]
          },
          "hasPasscode": {
            "type": "integer",
            "description": "Whether or not the user is protected by a (4 digit) passcode",
            "readOnly": true
          },
          "hasPassword": {
            "type": "integer",
            "description": "Whether or not the user is protected by a password",
            "readOnly": true
          },
          "apitoken": {
            "readOnly": true,
            "type": "string",
            "nullable": true
          },
          "activeTasks": {
            "readOnly": true,
            "type": "integer"
          },
          "restrictions": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRestriction"
            }
          },
          "deleted": {
            "type": "integer",
            "readOnly": true,
            "description": "1 if the user is a deleted user, 0 otherwise"
          },
          "mainuser": {
            "nullable": false,
            "type": "number",
            "readOnly": true,
            "description": "Whether or not the user is the store's main user. This is set on store creation and cannot be changed."
          }
        }
      },
      "SetUser": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "SearchUsers": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserRestriction": {
        "type": "string",
        "enum": [
          "POSBalanceModule",
          "OverviewModule",
          "SettingsModule",
          "StatisticsModule",
          "ProductModule",
          "POSModule",
          "CustomerModule",
          "ProductCreate",
          "ProductEdit",
          "ProductEditStock",
          "ProductEditCostprice",
          "TaskModule",
          "TaskCreate",
          "TaskEdit",
          "SettingsUserRestrictions"
        ]
      }
    }
  }
}